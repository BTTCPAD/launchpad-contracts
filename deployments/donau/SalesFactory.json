{
  "address": "0x6AF5D67e5c245A5a29A7A1be65D8516ada1061aa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adminAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allocationStaking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allSales",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocationStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deploySale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getAllSales",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastDeployedSale",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfSalesDeployed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSaleCreatedThroughFactory",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allocationStaking",
          "type": "address"
        }
      ],
      "name": "setAllocationStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xca2c2f31d1fd1b4c53ef2b5df69c40d5b20126e0a40717c8f9ea168570dacd48",
  "receipt": {
    "to": null,
    "from": "0xDc8bAAb2B29aE7A494882108bF924eb4C3f8DAA5",
    "contractAddress": "0x6AF5D67e5c245A5a29A7A1be65D8516ada1061aa",
    "transactionIndex": 0,
    "gasUsed": "5062585",
    "logsBloom": "0x
    "blockHash": "0x1094ae7623e318723bbb099a520b7406faea14f8b62f167c1a23fcda23339681",
    "transactionHash": "0xca2c2f31d1fd1b4c53ef2b5df69c40d5b20126e0a40717c8f9ea168570dacd48",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12584335,
        "transactionHash": "0xca2c2f31d1fd1b4c53ef2b5df69c40d5b20126e0a40717c8f9ea168570dacd48",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000dc8baab2b29ae7a494882108bf924eb4c3f8daa5",
          "0x000000000000000000000000cb670b22515bcaeaa7b3ffb8149d303f00fb026e"
        ],
        "data": "0x000000000000000000000000000000000000000000000052553e7e6eba48c0000000000000000000000000000000000000000000000016737e457606353a8000000000000000000000000000000000000000000000fa1af23f198f072fc85e080000000000000000000000000000000000000000000016212906f7977af1c000000000000000000000000000000000000000000000fa1b4494580d75ea111e08",
        "logIndex": 0,
        "blockHash": "0x1094ae7623e318723bbb099a520b7406faea14f8b62f167c1a23fcda23339681"
      }
    ],
    "blockNumber": 12584335,
    "cumulativeGasUsed": "5062585",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDc8bAAb2B29aE7A494882108bF924eb4C3f8DAA5",
    "0x400b025297349Fd2d289c4fda32821ddE39d0d88"
  ],
  "numDeployments": 3,
  "solcInputHash": "de5ab66ef7d9b595a10f3a6809d3056f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allocationStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allSales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploySale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getAllSales\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastDeployedSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfSalesDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSaleCreatedThroughFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocationStaking\",\"type\":\"address\"}],\"name\":\"setAllocationStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SalesFactory.sol\":\"SalesFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/BttcPadSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ISalesFactory.sol\\\";\\nimport \\\"./IAllocationStaking.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IERC20Extented is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract BttcPadSale {\\n    using SafeERC20 for IERC20Extented;\\n\\n    IAllocationStaking public allocationStakingContract;\\n    ISalesFactory public factory;\\n    IERC20Extented public USDCToken =\\n        IERC20Extented(0xeb2347A838cF4B351bF95dc56fB874D108E0Ac39);\\n\\n    struct FirstRound {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 minDeposit;\\n    }\\n\\n    struct SecondRound {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 minDeposit;\\n        uint256 maxDeposit;\\n    }\\n\\n    struct Sale {\\n        IERC20Extented token;\\n        bool isCreated;\\n        bool earningsWithdrawn;\\n        bool leftoverWithdrawn;\\n        address saleOwner;\\n        uint256 tokenPriceInUSDC;\\n        uint256 amountOfTokensToSell;\\n        uint256 totalUSDCRaised;\\n        uint256 tokensUnlockTime;\\n        FirstRound firstRound;\\n        SecondRound secondRound;\\n        bool isTokensForTiersCalculated;\\n    }\\n\\n    struct Participation {\\n        uint256 amountPaid;\\n        uint256 timeParticipated;\\n        uint256 tierId;\\n        bool isTokenLeftWithdrawn;\\n        bool[] isPortionWithdrawn;\\n    }\\n\\n    struct Buy {\\n        uint256 amountPaid;\\n        bool[] isPortionWithdrawn;\\n    }\\n\\n    struct Tier {\\n        uint256 participants;\\n        uint256 tierWeight;\\n        uint256 USDCDeposited;\\n        uint256 minToStake;\\n        uint256 maxToStake;\\n        uint256 tokensForTier;\\n        bool isLottery;\\n        address[] lotteryWallets;\\n    }\\n\\n    struct WhitelistUser {\\n        address userAddress;\\n        uint256 userTierId;\\n        bool isAllowed;\\n    }\\n\\n    struct Registration {\\n        uint256 registrationTimeStarts;\\n        uint256 registrationTimeEnds;\\n        uint256 numberOfRegistrants;\\n    }\\n\\n    Sale public sale;\\n    Registration public registration;\\n\\n    address public admin;\\n\\n    bool tokensDeposited;\\n\\n    uint256 public numOfParticipants;\\n    mapping(address => Participation) public userToParticipation;\\n    mapping(address => bool) public isParticipated;\\n    uint256 public tokensUnsold;\\n\\n    uint256 public numOfBuyers;\\n    mapping(address => Buy) public userToBuy;\\n    mapping(address => bool) public isBuyer;\\n\\n    mapping(address => WhitelistUser) public whitelist;\\n\\n    uint256[] public vestingPortionsUnlockTime;\\n    uint256[] public vestingPercentPerPortion;\\n\\n    Tier[] public tierIdToTier;\\n    uint256 public totalTierWeight;\\n\\n    modifier onlySaleOwner() {\\n        require(msg.sender == sale.saleOwner, \\\"OnlySaleOwner\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n\\n    modifier saleCreated() {\\n        require(sale.isCreated, \\\"Sale params are not set\\\");\\n        _;\\n    }\\n\\n    modifier tokensForTiersCalculated() {\\n        require(\\n            sale.isTokensForTiersCalculated,\\n            \\\"Tokens for tiers not caculated yet\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _admin, address _allocationStaking) {\\n        require(_admin != address(0));\\n        require(_allocationStaking != address(0));\\n        admin = _admin;\\n        factory = ISalesFactory(msg.sender);\\n        allocationStakingContract = IAllocationStaking(_allocationStaking);\\n    }\\n\\n    function setVestingParams(\\n        uint256[] memory _unlockingTimes,\\n        uint256[] memory _percents\\n    ) external onlyAdmin saleCreated {\\n        require(\\n            vestingPercentPerPortion.length == 0 &&\\n                vestingPortionsUnlockTime.length == 0,\\n            \\\"Vesting params are already set\\\"\\n        );\\n        require(\\n            _unlockingTimes.length == _percents.length,\\n            \\\"Parameters should have same length\\\"\\n        );\\n\\n        uint256 sum;\\n\\n        for (uint256 i = 0; i < _unlockingTimes.length; i++) {\\n            vestingPortionsUnlockTime.push(_unlockingTimes[i]);\\n            vestingPercentPerPortion.push(_percents[i]);\\n            sum += _percents[i];\\n        }\\n\\n        require(sum == 100, \\\"Percent distribution issue\\\");\\n    }\\n\\n    function setSaleParams(\\n        address _token,\\n        address _saleOwner,\\n        uint256 _tokenPriceInUSDC,\\n        uint256 _amountOfTokensToSell,\\n        uint256 _firstRoundStart,\\n        uint256 _firstRoundEnd,\\n        uint256 _secondRoundStart,\\n        uint256 _secondRoundEnd,\\n        uint256 _firstRoundMinDeposit,\\n        uint256 _secondRoundMinDeposit,\\n        uint256 _secondRoundMaxDeposit,\\n        uint256 _tokensUnlockTime\\n    ) external onlyAdmin {\\n        require(!sale.isCreated, \\\"Sale already created\\\");\\n        require(_saleOwner != address(0), \\\"owner can`t be 0\\\");\\n        require(_tokenPriceInUSDC != 0, \\\"Token price should be greater than 0\\\");\\n        require(\\n            _amountOfTokensToSell != 0,\\n            \\\"Amount to sell should be greater than 0\\\"\\n        );\\n        require(\\n            _firstRoundEnd > block.timestamp,\\n            \\\"First round end time should be in the future\\\"\\n        );\\n        require(\\n            _tokensUnlockTime > block.timestamp,\\n            \\\"Token unlock time should be in the future\\\"\\n        );\\n        require(\\n            _tokensUnlockTime >= _secondRoundEnd,\\n            \\\"Token unlock time should be after second round end\\\"\\n        );\\n\\n        sale.token = IERC20Extented(_token);\\n        sale.isCreated = true;\\n        sale.saleOwner = _saleOwner;\\n        sale.tokenPriceInUSDC = _tokenPriceInUSDC;\\n        sale.amountOfTokensToSell = _amountOfTokensToSell;\\n        sale.tokensUnlockTime = _tokensUnlockTime;\\n        sale.firstRound = FirstRound({\\n            startTime: _firstRoundStart,\\n            endTime: _firstRoundEnd,\\n            minDeposit: _firstRoundMinDeposit\\n        });\\n        sale.secondRound = SecondRound({\\n            startTime: _secondRoundStart,\\n            endTime: _secondRoundEnd,\\n            minDeposit: _secondRoundMinDeposit,\\n            maxDeposit: _secondRoundMaxDeposit\\n        });\\n    }\\n\\n    function setRegistrationTime(\\n        uint256 _registrationTimeStarts,\\n        uint256 _registrationTimeEnds\\n    ) external onlyAdmin saleCreated {\\n        require(\\n            _registrationTimeStarts >= block.timestamp,\\n            \\\"Registration start time should be after current time\\\"\\n        );\\n        require(\\n            _registrationTimeEnds > _registrationTimeStarts,\\n            \\\"Registration end time should be after start time\\\"\\n        );\\n        require(\\n            _registrationTimeEnds < sale.firstRound.endTime,\\n            \\\"Registration end time should be before sale end\\\"\\n        );\\n\\n        registration.registrationTimeStarts = _registrationTimeStarts;\\n        registration.registrationTimeEnds = _registrationTimeEnds;\\n    }\\n\\n    function registerForSale() public {\\n        uint256 stakeAmount = allocationStakingContract.deposited(msg.sender);\\n\\n        require(tierIdToTier.length > 0, \\\"Need to set Tiers\\\");\\n        require(\\n            tierIdToTier[0].minToStake <= stakeAmount,\\n            \\\"Need to stake minimum for current sale\\\"\\n        );\\n        require(\\n            whitelist[msg.sender].userAddress != msg.sender,\\n            \\\"You are registered\\\"\\n        );\\n        require(\\n            block.timestamp >= registration.registrationTimeStarts &&\\n                block.timestamp <= registration.registrationTimeEnds,\\n            \\\"Register is closed\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tierIdToTier.length; i++) {\\n            Tier storage t = tierIdToTier[i];\\n            if (t.minToStake <= stakeAmount && t.maxToStake > stakeAmount) {\\n                WhitelistUser memory u = WhitelistUser({\\n                    userAddress: msg.sender,\\n                    userTierId: i,\\n                    isAllowed: true\\n                });\\n\\n                if (t.isLottery) {\\n                    t.lotteryWallets.push(msg.sender);\\n                    u.isAllowed = false;\\n                }\\n\\n                whitelist[msg.sender] = u;\\n                registration.numberOfRegistrants++;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function updateTokenPriceInUSDC(uint256 price) external onlyAdmin {\\n        require(price > 0, \\\"Price == 0\\\");\\n        require(sale.firstRound.startTime > block.timestamp, \\\"Sale started\\\");\\n        sale.tokenPriceInUSDC = price;\\n    }\\n\\n    function setWhitelistUsers(address[] calldata users, uint256 tierId)\\n        public\\n        payable\\n        onlyAdmin\\n    {\\n        for (uint256 i = 0; i < users.length; i++) {\\n            WhitelistUser memory u = WhitelistUser({\\n                userAddress: users[i],\\n                userTierId: tierId,\\n                isAllowed: true\\n            });\\n            whitelist[users[i]] = u;\\n        }\\n    }\\n\\n    function addTiers(\\n        uint256[] calldata tierWeights,\\n        uint256[] calldata tierPoints,\\n        bool[] calldata isLottery\\n    ) public onlyAdmin {\\n        require(tierWeights.length > 0, \\\"Need 1 tier\\\");\\n        require(\\n            tierWeights.length == tierPoints.length,\\n            \\\"Need to be same length\\\"\\n        );\\n        require(\\n            tierWeights.length == isLottery.length,\\n            \\\"Need to be same length\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tierWeights.length; i++) {\\n            require(tierWeights[i] > 0, \\\"Weight should be greater than 0\\\");\\n\\n            totalTierWeight = totalTierWeight + tierWeights[i];\\n\\n            uint256 maxToStake = tierPoints.length - 1 > i\\n                ? tierPoints[i + 1]\\n                : 2**256 - 1;\\n\\n            Tier memory t = Tier({\\n                participants: 0,\\n                tierWeight: tierWeights[i],\\n                USDCDeposited: 0,\\n                minToStake: tierPoints[i],\\n                maxToStake: maxToStake,\\n                tokensForTier: 0,\\n                isLottery: isLottery[i],\\n                lotteryWallets: new address[](0)\\n            });\\n            tierIdToTier.push(t);\\n        }\\n    }\\n\\n    function depositTokens() external onlySaleOwner {\\n        require(!tokensDeposited, \\\"Deposit only once\\\");\\n        tokensDeposited = true;\\n        sale.token.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            sale.amountOfTokensToSell\\n        );\\n    }\\n\\n    function participate(uint256 amount) external payable saleCreated {\\n        require(\\n            block.timestamp >= sale.firstRound.startTime &&\\n                block.timestamp <= sale.firstRound.endTime,\\n            \\\"First round is not active\\\"\\n        );\\n        require(!isParticipated[msg.sender], \\\"Participate only once\\\");\\n\\n        require(msg.sender == tx.origin, \\\"Only direct calls\\\");\\n\\n        require(amount > 0, \\\"Can't buy 0 tokens\\\");\\n        require(\\n            (amount / (10**USDCToken.decimals())) % 2 == 0,\\n            \\\"Amount need to be divide by 2\\\"\\n        );\\n        require(\\n            amount >= sale.firstRound.minDeposit,\\n            \\\"Can't deposit less than minimum\\\"\\n        );\\n\\n        require(\\n            whitelist[msg.sender].userAddress != address(0),\\n            \\\"User must be in white list\\\"\\n        );\\n        require(whitelist[msg.sender].isAllowed, \\\"You can't access sale\\\");\\n\\n        uint256 _tierId = whitelist[msg.sender].userTierId;\\n        sale.totalUSDCRaised = sale.totalUSDCRaised + amount;\\n\\n        bool[] memory _isPortionWithdrawn = new bool[](\\n            vestingPortionsUnlockTime.length\\n        );\\n\\n        Participation memory p = Participation({\\n            amountPaid: amount,\\n            timeParticipated: block.timestamp,\\n            tierId: _tierId,\\n            isTokenLeftWithdrawn: false,\\n            isPortionWithdrawn: _isPortionWithdrawn\\n        });\\n\\n        Tier storage t = tierIdToTier[_tierId];\\n\\n        t.participants = t.participants + 1;\\n        t.USDCDeposited = t.USDCDeposited + amount;\\n        userToParticipation[msg.sender] = p;\\n        isParticipated[msg.sender] = true;\\n        numOfParticipants++;\\n\\n        USDCToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function buy(uint256 amount) external payable tokensForTiersCalculated {\\n        require(\\n            block.timestamp >= sale.secondRound.startTime &&\\n                block.timestamp <= sale.secondRound.endTime,\\n            \\\"Second round is not active\\\"\\n        );\\n        require(msg.sender == tx.origin, \\\"Only direct calls\\\");\\n        require(amount > 0, \\\"Can't buy 0 tokens\\\");\\n        require(\\n            (amount / (10**USDCToken.decimals())) % 2 == 0,\\n            \\\"Amount need to be divide by 2\\\"\\n        );\\n\\n        require(\\n            amount >= sale.secondRound.minDeposit,\\n            \\\"Can't deposit less than minimum\\\"\\n        );\\n\\n        uint256 tokenAmount = (amount / sale.tokenPriceInUSDC) *\\n            10**sale.token.decimals();\\n\\n        require(tokenAmount <= tokensUnsold, \\\"Not enough tokens remaining\\\");\\n\\n        if (isBuyer[msg.sender]) {\\n            Buy storage b = userToBuy[msg.sender];\\n\\n            require(\\n                b.amountPaid + amount < sale.secondRound.maxDeposit,\\n                \\\"Can't deposit more than maximum\\\"\\n            );\\n\\n            b.amountPaid = b.amountPaid + amount;\\n        } else {\\n            require(\\n                amount < sale.secondRound.maxDeposit,\\n                \\\"Can't deposit more than maximum\\\"\\n            );\\n\\n            bool[] memory _isPortionWithdrawn = new bool[](\\n                vestingPortionsUnlockTime.length\\n            );\\n\\n            Buy memory b = Buy({\\n                amountPaid: amount,\\n                isPortionWithdrawn: _isPortionWithdrawn\\n            });\\n\\n            userToBuy[msg.sender] = b;\\n            isBuyer[msg.sender] = true;\\n            numOfBuyers++;\\n        }\\n\\n        sale.totalUSDCRaised = sale.totalUSDCRaised + amount;\\n        tokensUnsold = tokensUnsold - tokenAmount;\\n\\n        USDCToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdrawTokens(uint256 portionId) external {\\n        require(\\n            block.timestamp >= sale.tokensUnlockTime,\\n            \\\"Tokens cannot be withdrawn\\\"\\n        );\\n        require(\\n            portionId < vestingPercentPerPortion.length,\\n            \\\"Invalid portion ID\\\"\\n        );\\n        require(\\n            vestingPortionsUnlockTime[portionId] <= block.timestamp,\\n            \\\"Portion not unlocked\\\"\\n        );\\n\\n        uint256 amountToWithdraw = 0;\\n\\n        if (isParticipated[msg.sender]) {\\n            Participation storage p = userToParticipation[msg.sender];\\n\\n            if (!p.isTokenLeftWithdrawn) {\\n                withdrawLeftoverForUser(msg.sender);\\n                p.isTokenLeftWithdrawn = true;\\n            }\\n\\n            if (!p.isPortionWithdrawn[portionId]) {\\n                p.isPortionWithdrawn[portionId] = true;\\n                uint256 amountFirstRound = calculateAmountWithdrawing(\\n                    msg.sender,\\n                    vestingPercentPerPortion[portionId]\\n                );\\n                amountToWithdraw = amountToWithdraw + amountFirstRound;\\n            }\\n        }\\n\\n        if (isBuyer[msg.sender]) {\\n            Buy storage b = userToBuy[msg.sender];\\n            if (!b.isPortionWithdrawn[portionId]) {\\n                b.isPortionWithdrawn[portionId] = true;\\n                uint256 amountSecondRound = ((b.amountPaid /\\n                    sale.tokenPriceInUSDC) *\\n                    10**sale.token.decimals() *\\n                    vestingPercentPerPortion[portionId]) / 100;\\n                amountToWithdraw = amountToWithdraw + amountSecondRound;\\n            }\\n        }\\n\\n        if (amountToWithdraw > 0) {\\n            sale.token.safeTransfer(msg.sender, amountToWithdraw);\\n        }\\n    }\\n\\n    function withdrawLeftoverForUser(address userAddress) internal {\\n        Participation memory p = userToParticipation[userAddress];\\n\\n        uint256 tokensForUser = calculateAmountWithdrawing(userAddress, 100);\\n\\n        uint256 leftover = p.amountPaid -\\n            (tokensForUser * sale.tokenPriceInUSDC) /\\n            10**sale.token.decimals();\\n\\n        if (leftover > 0) {\\n            USDCToken.safeTransfer(msg.sender, leftover);\\n        }\\n    }\\n\\n    function withdrawMultiplePortions(uint256[] calldata portionIds) external {\\n        uint256 totalToWithdraw = 0;\\n\\n        if (isParticipated[msg.sender]) {\\n            Participation storage p = userToParticipation[msg.sender];\\n\\n            if (!p.isTokenLeftWithdrawn) {\\n                withdrawLeftoverForUser(msg.sender);\\n                p.isTokenLeftWithdrawn = true;\\n            }\\n\\n            for (uint256 i = 0; i < portionIds.length; i++) {\\n                uint256 portionId = portionIds[i];\\n                require(portionId < vestingPercentPerPortion.length);\\n\\n                if (\\n                    !p.isPortionWithdrawn[portionId] &&\\n                    vestingPortionsUnlockTime[portionId] <= block.timestamp\\n                ) {\\n                    p.isPortionWithdrawn[portionId] = true;\\n                    uint256 amountWithdrawing = calculateAmountWithdrawing(\\n                        msg.sender,\\n                        vestingPercentPerPortion[portionId]\\n                    );\\n                    totalToWithdraw = totalToWithdraw + amountWithdrawing;\\n                }\\n            }\\n        }\\n\\n        if (isBuyer[msg.sender]) {\\n            Buy storage b = userToBuy[msg.sender];\\n\\n            for (uint256 i = 0; i < portionIds.length; i++) {\\n                uint256 portionId = portionIds[i];\\n                require(portionId < vestingPercentPerPortion.length);\\n\\n                if (\\n                    !b.isPortionWithdrawn[portionId] &&\\n                    vestingPortionsUnlockTime[portionId] <= block.timestamp\\n                ) {\\n                    b.isPortionWithdrawn[portionId] = true;\\n                    uint256 amountWithdrawing = ((b.amountPaid /\\n                        sale.tokenPriceInUSDC) *\\n                        10**sale.token.decimals() *\\n                        vestingPercentPerPortion[portionId]) / 100;\\n                    totalToWithdraw = totalToWithdraw + amountWithdrawing;\\n                }\\n            }\\n        }\\n\\n        if (totalToWithdraw > 0) {\\n            sale.token.safeTransfer(msg.sender, totalToWithdraw);\\n        }\\n    }\\n\\n    function withdrawEarnings() external onlySaleOwner {\\n        withdrawEarningsInternal();\\n    }\\n\\n    function withdrawLeftover() external onlySaleOwner {\\n        withdrawLeftoverInternal();\\n    }\\n\\n    function withdrawEarningsInternal() internal tokensForTiersCalculated {\\n        require(\\n            block.timestamp >= sale.secondRound.endTime,\\n            \\\"Sale not finished\\\"\\n        );\\n        require(!sale.earningsWithdrawn, \\\"Earnings already withdrawn\\\");\\n\\n        sale.earningsWithdrawn = true;\\n        uint256 totalProfit = ((sale.amountOfTokensToSell - tokensUnsold) *\\n            sale.tokenPriceInUSDC) / 10**sale.token.decimals();\\n        USDCToken.safeTransfer(msg.sender, totalProfit);\\n    }\\n\\n    function withdrawLeftoverInternal() internal tokensForTiersCalculated {\\n        require(\\n            block.timestamp >= sale.secondRound.endTime,\\n            \\\"Sale not finished\\\"\\n        );\\n        require(!sale.leftoverWithdrawn, \\\"Leftover already withdrawn\\\");\\n\\n        if (tokensUnsold > 0) {\\n            sale.leftoverWithdrawn = true;\\n            sale.token.safeTransfer(msg.sender, tokensUnsold);\\n        }\\n    }\\n\\n    function calculateTokensForTiers() public onlyAdmin {\\n        require(\\n            block.timestamp > sale.firstRound.endTime,\\n            \\\"First round is not finished\\\"\\n        );\\n        require(!sale.isTokensForTiersCalculated, \\\"Already calculated\\\");\\n\\n        tokensUnsold = sale.amountOfTokensToSell;\\n\\n        for (uint256 i = 0; i < tierIdToTier.length; i++) {\\n            Tier storage t = tierIdToTier[i];\\n\\n            uint256 tokensPerTier = (t.tierWeight * sale.amountOfTokensToSell) /\\n                totalTierWeight;\\n\\n            if (\\n                (tokensPerTier * sale.tokenPriceInUSDC) /\\n                    10**sale.token.decimals() <=\\n                t.USDCDeposited\\n            ) {\\n                t.tokensForTier = tokensPerTier;\\n            } else {\\n                t.tokensForTier =\\n                    (t.USDCDeposited / sale.tokenPriceInUSDC) *\\n                    10**sale.token.decimals();\\n            }\\n            tokensUnsold = tokensUnsold - t.tokensForTier;\\n        }\\n\\n        if (tokensUnsold > 0) {\\n            for (uint256 i = 0; i < tierIdToTier.length; i++) {\\n                Tier storage t = tierIdToTier[tierIdToTier.length - 1 - i];\\n\\n                if (\\n                    (t.tokensForTier * sale.tokenPriceInUSDC) /\\n                        10**sale.token.decimals() <\\n                    t.USDCDeposited\\n                ) {\\n                    uint256 USDCLeft = t.USDCDeposited -\\n                        (t.tokensForTier * sale.tokenPriceInUSDC) /\\n                        10**sale.token.decimals();\\n\\n                    uint256 tokensToAdd = (USDCLeft / sale.tokenPriceInUSDC) *\\n                        10**sale.token.decimals();\\n                    if (tokensUnsold >= tokensToAdd) {\\n                        t.tokensForTier = t.tokensForTier + tokensToAdd;\\n                        tokensUnsold = tokensUnsold - tokensToAdd;\\n                    } else {\\n                        t.tokensForTier = t.tokensForTier + tokensUnsold;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n\\n        sale.isTokensForTiersCalculated = true;\\n    }\\n\\n    function isWhitelisted() external view returns (bool) {\\n        return (whitelist[msg.sender].userAddress == msg.sender);\\n    }\\n\\n    function getVestingInfo()\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        return (vestingPortionsUnlockTime, vestingPercentPerPortion);\\n    }\\n\\n    function calculateAmountWithdrawing(\\n        address userAddress,\\n        uint256 tokenPercent\\n    ) internal view returns (uint256) {\\n        Participation memory p = userToParticipation[userAddress];\\n        Tier memory t = tierIdToTier[uint256(p.tierId)];\\n\\n        uint256 tokensForUser = (t.tokensForTier *\\n            p.amountPaid *\\n            tokenPercent) /\\n            t.USDCDeposited /\\n            100;\\n\\n        return (tokensForUser);\\n    }\\n\\n    function calculateAmountWithdrawingPortionPub(\\n        address userAddress,\\n        uint256 tokenPercent\\n    ) public view returns (uint256) {\\n        uint256 tokensForUser = calculateAmountWithdrawing(\\n            userAddress,\\n            tokenPercent\\n        );\\n\\n        return (tokensForUser);\\n    }\\n\\n    function random(uint256 number) private view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        block.timestamp + number,\\n                        block.difficulty + number,\\n                        msg.sender\\n                    )\\n                )\\n            ) % number;\\n    }\\n\\n    function remove(uint256 tierId, uint256 index) private {\\n        Tier storage tier = tierIdToTier[tierId];\\n        tier.lotteryWallets[index] = tier.lotteryWallets[\\n            tier.lotteryWallets.length - 1\\n        ];\\n        tier.lotteryWallets.pop();\\n    }\\n\\n    function runLottery(uint256 tierId, uint256 numberOfWinners)\\n        public\\n        onlyAdmin\\n    {\\n        Tier storage tier = tierIdToTier[tierId];\\n\\n        require(tier.isLottery, \\\"Lottery is not available for this tier\\\");\\n        require(\\n            numberOfWinners <= tier.lotteryWallets.length,\\n            \\\"Too many winners\\\"\\n        );\\n        require(\\n            block.timestamp > registration.registrationTimeEnds,\\n            \\\"Lottery should run after registration ends\\\"\\n        );\\n\\n        for (uint256 i = 0; i < numberOfWinners; i++) {\\n            uint256 rand = random(tier.lotteryWallets.length);\\n            WhitelistUser memory u = whitelist[tier.lotteryWallets[rand]];\\n            u.isAllowed = true;\\n            whitelist[tier.lotteryWallets[rand]] = u;\\n            remove(tierId, rand);\\n        }\\n    }\\n\\n    // DEV\\n    function setUSDCTokenAddress(address _address) public onlyAdmin {\\n        USDCToken = IERC20Extented(_address);\\n    }\\n\\n    function getLotteryWallets(uint256 tierId) public view returns (uint256) {\\n        return tierIdToTier[tierId].lotteryWallets.length;\\n    }\\n}\\n\",\"keccak256\":\"0xb8ac06c4ce6c92d81f313ff6c98f7881a4e192d558bfb6bb4f920deb1e64a15f\",\"license\":\"MIT\"},\"contracts/IAllocationStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAllocationStaking {\\n    function deposited(address _user) external view returns (uint256);\\n}\",\"keccak256\":\"0xf1dc3051df51ae4ffda3f3f0e0f0b2bef53992aa200732e823c765e19b832a6e\",\"license\":\"MIT\"},\"contracts/ISalesFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISalesFactory {\\n    function setSaleOwnerAndToken(address saleOwner, address saleToken) external;\\n    function isSaleCreatedThroughFactory(address sale) external view returns (bool);\\n}\",\"keccak256\":\"0xf0b7b897d6be9913642b693ce0afe3bdf6529db1bf7a23e42fd26dffc0ce5e92\",\"license\":\"MIT\"},\"contracts/SalesFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BttcPadSale.sol\\\";\\n\\ncontract SalesFactory {\\n\\n    address public allocationStaking;\\n    address public admin;\\n\\n    mapping (address => bool) public isSaleCreatedThroughFactory;\\n\\n    address [] public allSales;\\n\\n    modifier onlyAdmin() {\\n        require(\\n            msg.sender == admin ,\\n            \\\"Only admin can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor (address _adminAddress, address _allocationStaking)  {\\n        require(_adminAddress != address(0), \\\"error admin\\\");\\n        require(_allocationStaking != address(0), \\\"error staking\\\");\\n        admin = _adminAddress;\\n        allocationStaking = _allocationStaking;\\n    }\\n\\n    function setAllocationStaking(address _allocationStaking) public onlyAdmin {\\n        require(_allocationStaking != address(0), \\\"address error\\\");\\n        allocationStaking = _allocationStaking;\\n    }\\n\\n\\n    function deploySale()\\n    external\\n    onlyAdmin\\n    {\\n        BttcPadSale sale = new BttcPadSale(address(admin), allocationStaking);\\n\\n        isSaleCreatedThroughFactory[address(sale)] = true;\\n        allSales.push(address(sale));\\n    }\\n\\n    function getNumberOfSalesDeployed() external view returns (uint) {\\n        return allSales.length;\\n    }\\n\\n    function getLastDeployedSale() external view returns (address) {\\n        //\\n        if(allSales.length > 0) {\\n            return allSales[allSales.length - 1];\\n        }\\n        return address(0);\\n    }\\n\\n\\n    function getAllSales(uint startIndex, uint endIndex) external view returns (address[] memory) {\\n        require(endIndex > startIndex, \\\"Bad input\\\");\\n        require(endIndex <= allSales.length, \\\"Request more sale than created\\\");\\n\\n        address[] memory sales = new address[](endIndex - startIndex);\\n        uint index = 0;\\n\\n        for(uint i = startIndex; i < endIndex; i++) {\\n            sales[index] = allSales[i];\\n            index++;\\n        }\\n\\n        return sales;\\n    }\\n\\n}\",\"keccak256\":\"0x0e9fa3f71c8081fc03688070c006ba17fb0a6c1f29013ec488e94674626ece2a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80639e75cf4511610076578063b033342b1161005b578063b033342b14610164578063c050f3d41461016c578063f851a4401461017457600080fd5b80639e75cf4514610111578063a00249e81461013157600080fd5b8063135fb504146100a8578063209a9f41146100d85780635b30b428146100e95780639af2c481146100fc575b600080fd5b6000546100bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003546040519081526020016100cf565b6100bb6100f7366004610613565b610187565b61010f61010a3660046105e5565b6101b1565b005b61012461011f36600461062b565b6102a0565b6040516100cf919061064c565b61015461013f3660046105e5565b60026020526000908152604090205460ff1681565b60405190151581526020016100cf565b6100bb61044e565b61010f6104a7565b6001546100bb906001600160a01b031681565b6003818154811061019757600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b0316331461021b5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084015b60405180910390fd5b6001600160a01b0381166102715760405162461bcd60e51b815260206004820152600d60248201527f61646472657373206572726f72000000000000000000000000000000000000006044820152606401610212565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60608282116102f15760405162461bcd60e51b815260206004820152600960248201527f42616420696e70757400000000000000000000000000000000000000000000006044820152606401610212565b6003548211156103435760405162461bcd60e51b815260206004820152601e60248201527f52657175657374206d6f72652073616c65207468616e206372656174656400006044820152606401610212565b600061034f8484610699565b67ffffffffffffffff81111561037557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561039e578160200160208202803683370190505b5090506000845b8481101561044457600381815481106103ce57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b031683838151811061040c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528161042e816106b0565b925050808061043c906106b0565b9150506103a5565b5090949350505050565b600354600090156104a1576003805461046990600190610699565b8154811061048757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316919050565b50600090565b6001546001600160a01b0316331461050c5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b6064820152608401610212565b6001546000805460405191926001600160a01b0390811692911690610530906105d8565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610563573d6000803e3d6000fd5b506001600160a01b03166000818152600260205260408120805460ff191660019081179091556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff1916909117905550565b6152d0806106e283390190565b6000602082840312156105f6578081fd5b81356001600160a01b038116811461060c578182fd5b9392505050565b600060208284031215610624578081fd5b5035919050565b6000806040838503121561063d578081fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561068d5783516001600160a01b031683529284019291840191600101610668565b50909695505050505050565b6000828210156106ab576106ab6106cb565b500390565b60006000198214156106c4576106c46106cb565b5060010190565b634e487b7160e01b600052601160045260246000fdfe6080604052600280546001600160a01b03191673eb2347a838cf4b351bf95dc56fb874d108e0ac391790553480156200003757600080fd5b50604051620052d0380380620052d08339810160408190526200005a91620000db565b6001600160a01b0382166200006e57600080fd5b6001600160a01b0381166200008257600080fd5b601480546001600160a01b039384166001600160a01b031991821617909155600180548216331790556000805492909316911617905562000112565b80516001600160a01b0381168114620000d657600080fd5b919050565b60008060408385031215620000ee578182fd5b620000f983620000be565b91506200010960208401620000be565b90509250929050565b6151ae80620001226000396000f3fe6080604052600436106102a05760003560e01c8063927f6aee1161016e578063cd0d2f08116100cb578063dc25a3001161007f578063f1ef7ff211610064578063f1ef7ff2146108a9578063f4b7a413146108c9578063f851a440146108e957600080fd5b8063dc25a30014610866578063e099cf641461088957600080fd5b8063cf5b8d4b116100b0578063cf5b8d4b14610803578063d6e7807f14610833578063d96a094a1461085357600080fd5b8063cd0d2f08146107c1578063cf2d7e34146107d657600080fd5b8063b5c3dbbb11610122578063ba982c4111610107578063ba982c4114610775578063bfc2b13d1461078b578063c45a0155146107a157600080fd5b8063b5c3dbbb14610709578063b73c6ce91461076057600080fd5b8063a34d27ca11610153578063a34d27ca146106b4578063a525d237146106d4578063b0c96ebe146106e957600080fd5b8063927f6aee146106245780639b19251a1461064457600080fd5b8063611b40951161021c578063741dbc13116101d05780637764067e116101b55780637764067e146105e75780637c4b414d146105fc578063845c93061461061157600080fd5b8063741dbc13146105a75780637544197c146105c757600080fd5b80636ad1fe02116102015780636ad1fe02146104ab5780636f2d209e14610574578063718af7e61461058757600080fd5b8063611b40951461045f578063653a908d1461048b57600080fd5b8063315a095d11610273578063454d90bb11610258578063454d90bb146103c25780634c34c8de146103d85780635e7464f6146103f857600080fd5b8063315a095d14610368578063443bd1d01461038857600080fd5b8063059ea172146102a55780630bfa14f8146102e25780631bf8a8dd146103045780632a55feec14610328575b600080fd5b3480156102b157600080fd5b506000546102c5906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102ee57600080fd5b506103026102fd366004614b2f565b610909565b005b34801561031057600080fd5b5061031a60205481565b6040519081526020016102d9565b34801561033457600080fd5b50610358610343366004614b15565b601b6020526000908152604090205460ff1681565b60405190151581526020016102d9565b34801561037457600080fd5b50610302610383366004614d9d565b610d29565b34801561039457600080fd5b506011546012546013546103a792919083565b604080519384526020840192909252908201526060016102d9565b3480156103ce57600080fd5b5061031a60195481565b3480156103e457600080fd5b506002546102c5906001600160a01b031681565b34801561040457600080fd5b5061043d610413366004614b15565b60166020526000908152604090208054600182015460028301546003909301549192909160ff1684565b60408051948552602085019390935291830152151560608201526080016102d9565b34801561046b57600080fd5b50336000818152601c60205260409020546001600160a01b031614610358565b34801561049757600080fd5b506103026104a6366004614b15565b611152565b3480156104b757600080fd5b5060035460045460055460065460075460085460408051606080820183526009548252600a54602080840191909152600b54838501528351608081018552600c548152600d5491810191909152600e5493810193909352600f549083015260105461055c986001600160a01b038082169960ff600160a01b840481169a600160a81b850482169a600160b01b909504821699929093169792969395919492939192168c565b6040516102d99c9b9a99989796959493929190614e93565b610302610582366004614be4565b6111d8565b34801561059357600080fd5b506103026105a2366004614c2e565b61134e565b3480156105b357600080fd5b5061031a6105c2366004614bbb565b611770565b3480156105d357600080fd5b5061031a6105e2366004614d9d565b611787565b3480156105f357600080fd5b506103026117c4565b34801561060857600080fd5b50610302611dcd565b61030261061f366004614d9d565b611ec0565b34801561063057600080fd5b5061031a61063f366004614d9d565b61243a565b34801561065057600080fd5b5061068d61065f366004614b15565b601c602052600090815260409020805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b03909416845260208401929092521515908201526060016102d9565b3480156106c057600080fd5b506103026106cf366004614dcd565b61245b565b3480156106e057600080fd5b5061030261277c565b3480156106f557600080fd5b50610302610704366004614d9d565b6127ce565b34801561071557600080fd5b50610729610724366004614d9d565b6128d8565b604080519788526020880196909652948601939093526060850191909152608084015260a0830152151560c082015260e0016102d9565b34801561076c57600080fd5b5061030261292a565b34801561078157600080fd5b5061031a60185481565b34801561079757600080fd5b5061031a60155481565b3480156107ad57600080fd5b506001546102c5906001600160a01b031681565b3480156107cd57600080fd5b5061030261297c565b3480156107e257600080fd5b5061031a6107f1366004614b15565b601a6020526000908152604090205481565b34801561080f57600080fd5b5061035861081e366004614b15565b60176020526000908152604090205460ff1681565b34801561083f57600080fd5b5061030261084e366004614c6e565b612cff565b610302610861366004614d9d565b6131e2565b34801561087257600080fd5b5061087b613766565b6040516102d9929190614e65565b34801561089557600080fd5b506103026108a4366004614dcd565b613819565b3480156108b557600080fd5b5061031a6108c4366004614d9d565b613a43565b3480156108d557600080fd5b506103026108e4366004614d04565b613a53565b3480156108f557600080fd5b506014546102c5906001600160a01b031681565b6014546001600160a01b031633146109725760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084015b60405180910390fd5b600354600160a01b900460ff16156109cc5760405162461bcd60e51b815260206004820152601460248201527f53616c6520616c726561647920637265617465640000000000000000000000006044820152606401610969565b6001600160a01b038b16610a225760405162461bcd60e51b815260206004820152601060248201527f6f776e65722063616e60742062652030000000000000000000000000000000006044820152606401610969565b89610a945760405162461bcd60e51b8152602060048201526024808201527f546f6b656e2070726963652073686f756c64206265206772656174657220746860448201527f616e2030000000000000000000000000000000000000000000000000000000006064820152608401610969565b88610b075760405162461bcd60e51b815260206004820152602760248201527f416d6f756e7420746f2073656c6c2073686f756c64206265206772656174657260448201527f207468616e2030000000000000000000000000000000000000000000000000006064820152608401610969565b428711610b7c5760405162461bcd60e51b815260206004820152602c60248201527f466972737420726f756e6420656e642074696d652073686f756c64206265206960448201527f6e207468652066757475726500000000000000000000000000000000000000006064820152608401610969565b428111610bf15760405162461bcd60e51b815260206004820152602960248201527f546f6b656e20756e6c6f636b2074696d652073686f756c6420626520696e207460448201527f68652066757475726500000000000000000000000000000000000000000000006064820152608401610969565b84811015610c675760405162461bcd60e51b815260206004820152603260248201527f546f6b656e20756e6c6f636b2074696d652073686f756c64206265206166746560448201527f72207365636f6e6420726f756e6420656e6400000000000000000000000000006064820152608401610969565b600380547fffffffffffffffffffffff000000000000000000000000000000000000000000166001600160a01b039d8e1617600160a01b179055600480549b909c166001600160a01b03199b909b169a909a17909a5560059790975560069590955560089690965560408051606080820183528582526020808301869052918301879052600995909555600a93909355600b94909455835160808101855281815291820186905292810184905201849052600c55600d91909155600e55600f55565b600854421015610d7b5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e732063616e6e6f742062652077697468647261776e0000000000006044820152606401610969565b601e548110610dcc5760405162461bcd60e51b815260206004820152601260248201527f496e76616c696420706f7274696f6e20494400000000000000000000000000006044820152606401610969565b42601d8281548110610dee57634e487b7160e01b600052603260045260246000fd5b90600052602060002001541115610e475760405162461bcd60e51b815260206004820152601460248201527f506f7274696f6e206e6f7420756e6c6f636b65640000000000000000000000006044820152606401610969565b3360009081526017602052604081205460ff1615610f7157336000908152601660205260409020600381015460ff16610e9357610e8333613d0f565b60038101805460ff191660011790555b806004018381548110610eb657634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff16610f6f576001816004018481548110610eff57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055506000610f5f33601e8681548110610f4f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154613eb9565b9050610f6b8184614f7d565b9250505b505b336000908152601b602052604090205460ff161561113157336000908152601a6020526040902060018101805484908110610fbc57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1661112f57600181600101848154811061100557634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190066101000a81548160ff02191690831515021790555060006064601e858154811061105357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600360000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156110af57600080fd5b505afa1580156110c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e79190614dee565b6110f290600a614fec565b60055485546111019190614f95565b61110b9190615097565b6111159190615097565b61111f9190614f95565b905061112b8184614f7d565b9250505b505b801561114e5760035461114e906001600160a01b031633836140ae565b5050565b6014546001600160a01b031633146111b65760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b6064820152608401610969565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6014546001600160a01b0316331461123c5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b6064820152608401610969565b60005b82811015611348576000604051806060016040528086868581811061127457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906112899190614b15565b6001600160a01b03168152602081018590526001604090910152905080601c60008787868181106112ca57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906112df9190614b15565b6001600160a01b0390811682526020808301939093526040918201600020845181546001600160a01b031916921691909117815591830151600183015591909101516002909101805460ff19169115159190911790555080611340816150f9565b91505061123f565b50505050565b3360009081526017602052604081205460ff16156114fc57336000908152601660205260409020600381015460ff1661139a5761138a33613d0f565b60038101805460ff191660011790555b60005b838110156114f95760008585838181106113c757634e487b7160e01b600052603260045260246000fd5b905060200201359050601e8054905081106113e157600080fd5b82600401818154811061140457634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1615801561145c575042601d828154811061144e57634e487b7160e01b600052603260045260246000fd5b906000526020600020015411155b156114e657600183600401828154811061148657634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190066101000a81548160ff02191690831515021790555060006114d633601e8481548110610f4f57634e487b7160e01b600052603260045260246000fd5b90506114e28186614f7d565b9450505b50806114f1816150f9565b91505061139d565b50505b336000908152601b602052604090205460ff161561174e57336000908152601a60205260408120905b8381101561174b57600085858381811061154f57634e487b7160e01b600052603260045260246000fd5b905060200201359050601e80549050811061156957600080fd5b82600101818154811061158c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff161580156115e4575042601d82815481106115d657634e487b7160e01b600052603260045260246000fd5b906000526020600020015411155b1561173857600183600101828154811061160e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190066101000a81548160ff02191690831515021790555060006064601e838154811061165c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600360000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156116b857600080fd5b505afa1580156116cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f09190614dee565b6116fb90600a614fec565b600554875461170a9190614f95565b6117149190615097565b61171e9190615097565b6117289190614f95565b90506117348186614f7d565b9450505b5080611743816150f9565b915050611525565b50505b801561176b5760035461176b906001600160a01b031633836140ae565b505050565b60008061177d8484613eb9565b9150505b92915050565b6000601f82815481106117aa57634e487b7160e01b600052603260045260246000fd5b600091825260209091206007600890920201015492915050565b6014546001600160a01b031633146118285760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b6064820152608401610969565b600a5442116118795760405162461bcd60e51b815260206004820152601b60248201527f466972737420726f756e64206973206e6f742066696e697368656400000000006044820152606401610969565b60105460ff16156118cc5760405162461bcd60e51b815260206004820152601260248201527f416c72656164792063616c63756c6174656400000000000000000000000000006044820152606401610969565b60065460185560005b601f54811015611acc576000601f828154811061190257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201905060006020546003800154836001015461192b9190615097565b6119359190614f95565b90508160020154600360000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561198d57600080fd5b505afa1580156119a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c59190614dee565b6119d090600a614fec565b6005546119dd9084615097565b6119e79190614f95565b116119f85760058201819055611aa2565b6003546040805163313ce56760e01b815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b158015611a3d57600080fd5b505afa158015611a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a759190614dee565b611a8090600a614fec565b6005546002840154611a929190614f95565b611a9c9190615097565b60058301555b8160050154601854611ab491906150b6565b60185550819050611ac4816150f9565b9150506118d5565b5060185415611dbe5760005b601f54811015611dbc576000601f826001601f80549050611af991906150b6565b611b0391906150b6565b81548110611b2157634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020190508060020154600360000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611b8757600080fd5b505afa158015611b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbf9190614dee565b611bca90600a614fec565b6005805490840154611bdc9190615097565b611be69190614f95565b1015611da9576003546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b158015611c3157600080fd5b505afa158015611c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c699190614dee565b611c7490600a614fec565b6005805490840154611c869190615097565b611c909190614f95565b8260020154611c9f91906150b6565b90506000600360000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611cf457600080fd5b505afa158015611d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2c9190614dee565b611d3790600a614fec565b600554611d449084614f95565b611d4e9190615097565b90508060185410611d8457808360050154611d699190614f7d565b6005840155601854611d7c9082906150b6565b601855611da6565b6018548360050154611d969190614f7d565b8360050181905550505050611dbc565b50505b5080611db4816150f9565b915050611ad8565b505b6010805460ff19166001179055565b6004546001600160a01b03163314611e175760405162461bcd60e51b815260206004820152600d60248201526c27b7363ca9b0b632a7bbb732b960991b6044820152606401610969565b601454600160a01b900460ff1615611e715760405162461bcd60e51b815260206004820152601160248201527f4465706f736974206f6e6c79206f6e63650000000000000000000000000000006044820152606401610969565b601480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055600654600354611ebe916001600160a01b039091169033903090614157565b565b600354600160a01b900460ff16611f195760405162461bcd60e51b815260206004820152601760248201527f53616c6520706172616d7320617265206e6f74207365740000000000000000006044820152606401610969565b6009544210801590611f2d5750600a544211155b611f795760405162461bcd60e51b815260206004820152601960248201527f466972737420726f756e64206973206e6f7420616374697665000000000000006044820152606401610969565b3360009081526017602052604090205460ff1615611fd95760405162461bcd60e51b815260206004820152601560248201527f5061727469636970617465206f6e6c79206f6e636500000000000000000000006044820152606401610969565b3332146120285760405162461bcd60e51b815260206004820152601160248201527f4f6e6c79206469726563742063616c6c730000000000000000000000000000006044820152606401610969565b600081116120785760405162461bcd60e51b815260206004820152601260248201527f43616e277420627579203020746f6b656e7300000000000000000000000000006044820152606401610969565b60028060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156120c757600080fd5b505afa1580156120db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ff9190614dee565b61210a90600a614fec565b6121149083614f95565b61211e9190615114565b1561216b5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206e65656420746f2062652064697669646520627920320000006044820152606401610969565b600b548110156121bd5760405162461bcd60e51b815260206004820152601f60248201527f43616e2774206465706f736974206c657373207468616e206d696e696d756d006044820152606401610969565b336000908152601c60205260409020546001600160a01b03166122225760405162461bcd60e51b815260206004820152601a60248201527f55736572206d75737420626520696e207768697465206c6973740000000000006044820152606401610969565b336000908152601c602052604090206002015460ff166122845760405162461bcd60e51b815260206004820152601560248201527f596f752063616e2774206163636573732073616c6500000000000000000000006044820152606401610969565b336000908152601c60205260409020600101546007546122a5908390614f7d565b600755601d5460009067ffffffffffffffff8111156122d457634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156122fd578160200160208202803683370190505b50905060006040518060a001604052808581526020014281526020018481526020016000151581526020018381525090506000601f848154811061235157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802019050806000015460016123729190614f7d565b81556002810154612384908690614f7d565b60028281019190915533600090815260166020908152604091829020855181558582015160018201559185015192820192909255606084015160038201805460ff19169115159190911790556080840151805185936123ea926004850192910190614902565b5050336000908152601760205260408120805460ff1916600117905560158054925090612416836150f9565b9091555050600254612433906001600160a01b0316333088614157565b5050505050565b601e818154811061244a57600080fd5b600091825260209091200154905081565b6014546001600160a01b031633146124bf5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b6064820152608401610969565b6000601f83815481106124e257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201600681015490915060ff1661256f5760405162461bcd60e51b815260206004820152602660248201527f4c6f7474657279206973206e6f7420617661696c61626c6520666f722074686960448201527f73207469657200000000000000000000000000000000000000000000000000006064820152608401610969565b60078101548211156125c35760405162461bcd60e51b815260206004820152601060248201527f546f6f206d616e792077696e6e657273000000000000000000000000000000006044820152606401610969565b601254421161263a5760405162461bcd60e51b815260206004820152602a60248201527f4c6f74746572792073686f756c642072756e206166746572207265676973747260448201527f6174696f6e20656e6473000000000000000000000000000000000000000000006064820152608401610969565b60005b82811015611348576007820154600090612656906141a8565b90506000601c600085600701848154811061268157634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b039081168452838201949094526040928301822083516060810185528154909516855260019081015491850191909152918301919091526007860180549293508392601c929190869081106126fb57634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b039081168452838201949094526040928301909120845181546001600160a01b0319169416939093178355830151600183015591909101516002909101805460ff1916911515919091179055612767868361420d565b50508080612774906150f9565b91505061263d565b6004546001600160a01b031633146127c65760405162461bcd60e51b815260206004820152600d60248201526c27b7363ca9b0b632a7bbb732b960991b6044820152606401610969565b611ebe614328565b6014546001600160a01b031633146128325760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b6064820152608401610969565b600081116128825760405162461bcd60e51b815260206004820152600a60248201527f5072696365203d3d2030000000000000000000000000000000000000000000006044820152606401610969565b60095442106128d35760405162461bcd60e51b815260206004820152600c60248201527f53616c65207374617274656400000000000000000000000000000000000000006044820152606401610969565b600555565b601f81815481106128e857600080fd5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600690960154949650929491939092919060ff1687565b6004546001600160a01b031633146129745760405162461bcd60e51b815260206004820152600d60248201526c27b7363ca9b0b632a7bbb732b960991b6044820152606401610969565b611ebe614481565b600080546040517fcb13cddb0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039091169063cb13cddb9060240160206040518083038186803b1580156129d957600080fd5b505afa1580156129ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a119190614db5565b601f54909150612a635760405162461bcd60e51b815260206004820152601160248201527f4e65656420746f207365742054696572730000000000000000000000000000006044820152606401610969565b80601f600081548110612a8657634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201600301541115612b0c5760405162461bcd60e51b815260206004820152602660248201527f4e65656420746f207374616b65206d696e696d756d20666f722063757272656e60448201527f742073616c6500000000000000000000000000000000000000000000000000006064820152608401610969565b336000818152601c60205260409020546001600160a01b03161415612b735760405162461bcd60e51b815260206004820152601260248201527f596f7520617265207265676973746572656400000000000000000000000000006044820152606401610969565b6011544210801590612b8757506012544211155b612bd35760405162461bcd60e51b815260206004820152601260248201527f526567697374657220697320636c6f73656400000000000000000000000000006044820152606401610969565b60005b601f5481101561114e576000601f8281548110612c0357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201905082816003015411158015612c2a5750828160040154115b15612cec576040805160608101825233815260208101849052600191810191909152600682015460ff1615612c85576007820180546001810182556000918252602082200180546001600160a01b0319163317905560408201525b336000908152601c60209081526040808320845181546001600160a01b0319166001600160a01b039091161781559184015160018301558301516002909101805460ff19169115159190911790556013805491612ce1836150f9565b919050555050505050565b5080612cf7816150f9565b915050612bd6565b6014546001600160a01b03163314612d635760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b6064820152608401610969565b84612db05760405162461bcd60e51b815260206004820152600b60248201527f4e656564203120746965720000000000000000000000000000000000000000006044820152606401610969565b848314612dff5760405162461bcd60e51b815260206004820152601660248201527f4e65656420746f2062652073616d65206c656e677468000000000000000000006044820152606401610969565b848114612e4e5760405162461bcd60e51b815260206004820152601660248201527f4e65656420746f2062652073616d65206c656e677468000000000000000000006044820152606401610969565b60005b858110156131d9576000878783818110612e7b57634e487b7160e01b600052603260045260246000fd5b9050602002013511612ecf5760405162461bcd60e51b815260206004820152601f60248201527f5765696768742073686f756c642062652067726561746572207468616e2030006044820152606401610969565b868682818110612eef57634e487b7160e01b600052603260045260246000fd5b90506020020135602054612f039190614f7d565b602055600081612f146001876150b6565b11612f2157600019612f53565b8585612f2e846001614f7d565b818110612f4b57634e487b7160e01b600052603260045260246000fd5b905060200201355b90506000604051806101000160405280600081526020018a8a86818110612f8a57634e487b7160e01b600052603260045260246000fd5b90506020020135815260200160008152602001888886818110612fbd57634e487b7160e01b600052603260045260246000fd5b90506020020135815260200183815260200160008152602001868686818110612ff657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061300b9190614d65565b15158152602001600060405190808252806020026020018201604052801561303d578160200160208202803683370190505b509052601f8054600181018255600091909152815160089091027fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80781019182556020808401517fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80883015560408401517fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80983015560608401517fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80a83015560808401517fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80b83015560a08401517fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80c83015560c08401517fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80d8301805491151560ff1990921691909117905560e0840151805194955085946131c1937fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80e019291909101906149a7565b505050505080806131d1906150f9565b915050612e51565b50505050505050565b60105460ff1661323f5760405162461bcd60e51b815260206004820152602260248201527f546f6b656e7320666f72207469657273206e6f7420636163756c617465642079604482015261195d60f21b6064820152608401610969565b600c5442108015906132535750600d544211155b61329f5760405162461bcd60e51b815260206004820152601a60248201527f5365636f6e6420726f756e64206973206e6f74206163746976650000000000006044820152606401610969565b3332146132ee5760405162461bcd60e51b815260206004820152601160248201527f4f6e6c79206469726563742063616c6c730000000000000000000000000000006044820152606401610969565b6000811161333e5760405162461bcd60e51b815260206004820152601260248201527f43616e277420627579203020746f6b656e7300000000000000000000000000006044820152606401610969565b60028060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561338d57600080fd5b505afa1580156133a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c59190614dee565b6133d090600a614fec565b6133da9083614f95565b6133e49190615114565b156134315760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206e65656420746f2062652064697669646520627920320000006044820152606401610969565b600e548110156134835760405162461bcd60e51b815260206004820152601f60248201527f43616e2774206465706f736974206c657373207468616e206d696e696d756d006044820152606401610969565b6003546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156134c857600080fd5b505afa1580156134dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135009190614dee565b61350b90600a614fec565b6005546135189084614f95565b6135229190615097565b90506018548111156135765760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f75676820746f6b656e732072656d61696e696e6700000000006044820152606401610969565b336000908152601b602052604090205460ff161561360e57336000908152601a60205260409020600f5481546135ad908590614f7d565b106135fa5760405162461bcd60e51b815260206004820152601f60248201527f43616e2774206465706f736974206d6f7265207468616e206d6178696d756d006044820152606401610969565b8054613607908490614f7d565b905561372c565b600f54821061365f5760405162461bcd60e51b815260206004820152601f60248201527f43616e2774206465706f736974206d6f7265207468616e206d6178696d756d006044820152606401610969565b601d5460009067ffffffffffffffff81111561368b57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156136b4578160200160208202803683370190505b506040805180820182528581526020808201848152336000908152601a835293909320825181559251805194955091938493926136f8926001850192910190614902565b5050336000908152601b60205260408120805460ff1916600117905560198054925090613724836150f9565b919050555050505b60075461373a908390614f7d565b60075560185461374b9082906150b6565b60185560025461114e906001600160a01b0316333085614157565b606080601d601e818054806020026020016040519081016040528092919081815260200182805480156137b857602002820191906000526020600020905b8154815260200190600101908083116137a4575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561380a57602002820191906000526020600020905b8154815260200190600101908083116137f6575b50505050509050915091509091565b6014546001600160a01b0316331461387d5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b6064820152608401610969565b600354600160a01b900460ff166138d65760405162461bcd60e51b815260206004820152601760248201527f53616c6520706172616d7320617265206e6f74207365740000000000000000006044820152606401610969565b4282101561394c5760405162461bcd60e51b815260206004820152603460248201527f526567697374726174696f6e2073746172742074696d652073686f756c64206260448201527f652061667465722063757272656e742074696d650000000000000000000000006064820152608401610969565b8181116139c15760405162461bcd60e51b815260206004820152603060248201527f526567697374726174696f6e20656e642074696d652073686f756c642062652060448201527f61667465722073746172742074696d65000000000000000000000000000000006064820152608401610969565b600a548110613a385760405162461bcd60e51b815260206004820152602f60248201527f526567697374726174696f6e20656e642074696d652073686f756c642062652060448201527f6265666f72652073616c6520656e6400000000000000000000000000000000006064820152608401610969565b601191909155601255565b601d818154811061244a57600080fd5b6014546001600160a01b03163314613ab75760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b6064820152608401610969565b600354600160a01b900460ff16613b105760405162461bcd60e51b815260206004820152601760248201527f53616c6520706172616d7320617265206e6f74207365740000000000000000006044820152606401610969565b601e54158015613b205750601d54155b613b6c5760405162461bcd60e51b815260206004820152601e60248201527f56657374696e6720706172616d732061726520616c72656164792073657400006044820152606401610969565b8051825114613be35760405162461bcd60e51b815260206004820152602260248201527f506172616d65746572732073686f756c6420686176652073616d65206c656e6760448201527f74680000000000000000000000000000000000000000000000000000000000006064820152608401610969565b6000805b8351811015613cbe57601d848281518110613c1257634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825460018101845560009384529190922001558251601e90849083908110613c5657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825460018101845560009384529190922001558251839082908110613c9757634e487b7160e01b600052603260045260246000fd5b602002602001015182613caa9190614f7d565b915080613cb6816150f9565b915050613be7565b508060641461176b5760405162461bcd60e51b815260206004820152601a60248201527f50657263656e7420646973747269627574696f6e2069737375650000000000006044820152606401610969565b6001600160a01b0381166000908152601660209081526040808320815160a08101835281548152600182015481850152600282015481840152600382015460ff1615156060820152600482018054845181870281018701909552808552919492936080860193909290830182828015613dc757602002820191906000526020600020906000905b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411613d965790505b50505050508152505090506000613ddf836064613eb9565b90506000600360000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613e3457600080fd5b505afa158015613e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e6c9190614dee565b613e7790600a614fec565b600554613e849084615097565b613e8e9190614f95565b8351613e9a91906150b6565b9050801561134857600254611348906001600160a01b031633836140ae565b6001600160a01b0382166000908152601660209081526040808320815160a08101835281548152600182015481850152600282015481840152600382015460ff161515606082015260048201805484518187028101870190955280855286959294608086019390929190830182828015613f7257602002820191906000526020600020906000905b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411613f415790505b50505050508152505090506000601f826040015181548110613fa457634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051610100810182526008909302909101805483526001810154838501526002810154838301526003810154606084015260048101546080840152600581015460a0840152600681015460ff16151560c08401526007810180548351818702810187019094528084529394919360e08601939283018282801561405d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161403f575b50505050508152505090506000606482604001518685600001518560a001516140869190615097565b6140909190615097565b61409a9190614f95565b6140a49190614f95565b9695505050505050565b6040516001600160a01b03831660248201526044810182905261176b9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614683565b6040516001600160a01b03808516602483015283166044820152606481018290526113489085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016140f3565b6000816141b58142614f7d565b6141bf8444614f7d565b60408051602081019390935282015233606090811b6bffffffffffffffffffffffff1916908201526074016040516020818303038152906040528051906020012060001c6117819190615114565b6000601f838154811061423057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802019050806007016001826007018054905061425891906150b6565b8154811061427657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546007820180546001600160a01b0390921691849081106142b257634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060070180548061430157634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b60105460ff166143855760405162461bcd60e51b815260206004820152602260248201527f546f6b656e7320666f72207469657273206e6f7420636163756c617465642079604482015261195d60f21b6064820152608401610969565b600d544210156143d75760405162461bcd60e51b815260206004820152601160248201527f53616c65206e6f742066696e69736865640000000000000000000000000000006044820152606401610969565b600354600160b01b900460ff16156144315760405162461bcd60e51b815260206004820152601a60248201527f4c6566746f76657220616c72656164792077697468647261776e0000000000006044820152606401610969565b60185415611ebe57600380547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff8116600160b01b17909155601854611ebe916001600160a01b03169033906140ae565b60105460ff166144de5760405162461bcd60e51b815260206004820152602260248201527f546f6b656e7320666f72207469657273206e6f7420636163756c617465642079604482015261195d60f21b6064820152608401610969565b600d544210156145305760405162461bcd60e51b815260206004820152601160248201527f53616c65206e6f742066696e69736865640000000000000000000000000000006044820152606401610969565b600354600160a81b900460ff161561458a5760405162461bcd60e51b815260206004820152601a60248201527f4561726e696e677320616c72656164792077697468647261776e0000000000006044820152606401610969565b600380547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff8116600160a81b179091556040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b1580156145fc57600080fd5b505afa158015614610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146349190614dee565b61463f90600a614fec565b60055460185460065461465291906150b6565b61465c9190615097565b6146669190614f95565b600254909150614680906001600160a01b031633836140ae565b50565b60006146d8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166147689092919063ffffffff16565b80519091501561176b57808060200190518101906146f69190614d81565b61176b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610969565b60606147778484600085614781565b90505b9392505050565b6060824710156147f95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610969565b6001600160a01b0385163b6148505760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610969565b600080866001600160a01b0316858760405161486c9190614e49565b60006040518083038185875af1925050503d80600081146148a9576040519150601f19603f3d011682016040523d82523d6000602084013e6148ae565b606091505b50915091506148be8282866148c9565b979650505050505050565b606083156148d857508161477a565b8251156148e85782518084602001fd5b8160405162461bcd60e51b81526004016109699190614f4a565b82805482825590600052602060002090601f016020900481019282156149975791602002820160005b8382111561496857835183826101000a81548160ff021916908315150217905550926020019260010160208160000104928301926001030261492b565b80156149955782816101000a81549060ff0219169055600101602081600001049283019260010302614968565b505b506149a39291506149fc565b5090565b828054828255906000526020600020908101928215614997579160200282015b8281111561499757825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906149c7565b5b808211156149a357600081556001016149fd565b80356001600160a01b0381168114614a2857600080fd5b919050565b60008083601f840112614a3e578081fd5b50813567ffffffffffffffff811115614a55578182fd5b6020830191508360208260051b8501011115614a7057600080fd5b9250929050565b600082601f830112614a87578081fd5b8135602067ffffffffffffffff80831115614aa457614aa4615154565b8260051b604051601f19603f83011681018181108482111715614ac957614ac9615154565b60405284815283810192508684018288018501891015614ae7578687fd5b8692505b85831015614b09578035845292840192600192909201918401614aeb565b50979650505050505050565b600060208284031215614b26578081fd5b61477a82614a11565b6000806000806000806000806000806000806101808d8f031215614b51578788fd5b614b5a8d614a11565b9b50614b6860208e01614a11565b9b9e9b9d5050505060408a0135996060810135996080820135995060a0820135985060c0820135975060e08201359650610100820135955061012082013594506101408201359350610160909101359150565b60008060408385031215614bcd578182fd5b614bd683614a11565b946020939093013593505050565b600080600060408486031215614bf8578283fd5b833567ffffffffffffffff811115614c0e578384fd5b614c1a86828701614a2d565b909790965060209590950135949350505050565b60008060208385031215614c40578182fd5b823567ffffffffffffffff811115614c56578283fd5b614c6285828601614a2d565b90969095509350505050565b60008060008060008060608789031215614c86578182fd5b863567ffffffffffffffff80821115614c9d578384fd5b614ca98a838b01614a2d565b90985096506020890135915080821115614cc1578384fd5b614ccd8a838b01614a2d565b90965094506040890135915080821115614ce5578384fd5b50614cf289828a01614a2d565b979a9699509497509295939492505050565b60008060408385031215614d16578182fd5b823567ffffffffffffffff80821115614d2d578384fd5b614d3986838701614a77565b93506020850135915080821115614d4e578283fd5b50614d5b85828601614a77565b9150509250929050565b600060208284031215614d76578081fd5b813561477a8161516a565b600060208284031215614d92578081fd5b815161477a8161516a565b600060208284031215614dae578081fd5b5035919050565b600060208284031215614dc6578081fd5b5051919050565b60008060408385031215614ddf578182fd5b50508035926020909101359150565b600060208284031215614dff578081fd5b815160ff8116811461477a578182fd5b6000815180845260208085019450808401835b83811015614e3e57815187529582019590820190600101614e22565b509495945050505050565b60008251614e5b8184602087016150cd565b9190910192915050565b604081526000614e786040830185614e0f565b8281036020840152614e8a8185614e0f565b95945050505050565b6000610220820190506001600160a01b03808f1683528d151560208401528c151560408401528b15156060840152808b166080840152508860a08301528760c08301528660e083015285610100830152845161012083015260208501516101408301526040850151610160830152614f30610180830185805182526020810151602083015260408101516040830152606081015160608301525050565b8215156102008301529d9c50505050505050505050505050565b6020815260008251806020840152614f698160408501602087016150cd565b601f01601f19169190910160400192915050565b60008219821115614f9057614f90615128565b500190565b600082614fa457614fa461513e565b500490565b600181815b80851115614fe4578160001904821115614fca57614fca615128565b80851615614fd757918102915b93841c9390800290614fae565b509250929050565b600061477a60ff84168360008261500557506001611781565b8161501257506000611781565b816001811461502857600281146150325761504e565b6001915050611781565b60ff84111561504357615043615128565b50506001821b611781565b5060208310610133831016604e8410600b8410161715615071575081810a611781565b61507b8383614fa9565b806000190482111561508f5761508f615128565b029392505050565b60008160001904831182151516156150b1576150b1615128565b500290565b6000828210156150c8576150c8615128565b500390565b60005b838110156150e85781810151838201526020016150d0565b838111156113485750506000910152565b600060001982141561510d5761510d615128565b5060010190565b6000826151235761512361513e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461468057600080fdfea26469706673582212209165833e7431825e128c08e67479dbcba9fbf5ae953035ae18f787fc54c6ea1064736f6c63430008040033a26469706673582212201d322579ba1b1acff60d3dea23634bc487f2bf6b47996b3db06ea7624fd24d4f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3285,
        "contract": "contracts/SalesFactory.sol:SalesFactory",
        "label": "allocationStaking",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3287,
        "contract": "contracts/SalesFactory.sol:SalesFactory",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3291,
        "contract": "contracts/SalesFactory.sol:SalesFactory",
        "label": "isSaleCreatedThroughFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3294,
        "contract": "contracts/SalesFactory.sol:SalesFactory",
        "label": "allSales",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}