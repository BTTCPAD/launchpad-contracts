{
  "address": "0x3EaE4e7cde12B2DfE26dAC273AAd2986ccbbd7DA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adminAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_allocationStaking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allSales",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocationStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deploySale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getAllSales",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastDeployedSale",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfSalesDeployed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSaleCreatedThroughFactory",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allocationStaking",
          "type": "address"
        }
      ],
      "name": "setAllocationStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x62b53cc3499f7fbf426b603f7ed1327c7c671d423d30bc80baf2ba2db9a5e300",
  "receipt": {
    "to": null,
    "from": "0x284c98652c9bF896E080832fAe015D01C0022a43",
    "contractAddress": "0x3EaE4e7cde12B2DfE26dAC273AAd2986ccbbd7DA",
    "transactionIndex": 0,
    "gasUsed": "3515757",
    "logsBloom": "0x
    "blockHash": "0xf0542f0e98d06c99d9740d96441fa5dcd1b306e8f7fbbd8e52d2ab54e67306d5",
    "transactionHash": "0x62b53cc3499f7fbf426b603f7ed1327c7c671d423d30bc80baf2ba2db9a5e300",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9578120,
        "transactionHash": "0x62b53cc3499f7fbf426b603f7ed1327c7c671d423d30bc80baf2ba2db9a5e300",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000284c98652c9bf896e080832fae015d01c0022a43",
          "0x000000000000000000000000f4c2f1d772488cc6d3ec3c703b9710fa2c0e227e"
        ],
        "data": "0x0000000000000000000000000000000000000000000000392d4765442de7c000000000000000000000000000000000000000000000084555aaec5a9961ea8000000000000000000000000000000000000000000000f8a3b28535e81ee9c89db800000000000000000000000000000000000000000008451c7da4f5553402c000000000000000000000000000000000000000000000f8a3ebb27d4d6317b05db8",
        "logIndex": 0,
        "blockHash": "0xf0542f0e98d06c99d9740d96441fa5dcd1b306e8f7fbbd8e52d2ab54e67306d5"
      }
    ],
    "blockNumber": 9578120,
    "cumulativeGasUsed": "3515757",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x284c98652c9bF896E080832fAe015D01C0022a43",
    "0x3915b4DA28Ddd51bD7E684DeEc3361f71524b38E"
  ],
  "numDeployments": 1,
  "solcInputHash": "da1861d0de417d91b8ed51ba4861dec9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allocationStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allSales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploySale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getAllSales\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastDeployedSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfSalesDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSaleCreatedThroughFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocationStaking\",\"type\":\"address\"}],\"name\":\"setAllocationStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SalesFactory.sol\":\"SalesFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/BttcPadSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; \\nimport \\\"./ISalesFactory.sol\\\";\\nimport \\\"./IAllocationStaking.sol\\\";\\n\\ninterface IERC20Extented is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract BttcPadSale {\\n\\n    using SafeERC20 for IERC20Extented;\\n\\n    IAllocationStaking public allocationStakingContract;\\n    ISalesFactory public factory;\\n    IERC20Extented public USDCToken = IERC20Extented(0xC0e296da19bBdcf960291C7AEf02c9F24D6fA1fd);\\n    \\n    struct Sale {\\n        IERC20Extented token;\\n        bool isCreated;\\n        bool earningsWithdrawn;\\n        bool leftoverWithdrawn;\\n        address saleOwner;\\n        uint256 tokenPriceInUSDC;\\n        uint256 amountOfTokensToSell;\\n        uint256 totalUSDCRaised;\\n        uint256 saleEnd;\\n        uint256 saleStart;\\n        uint256 tokensUnlockTime;\\n        uint256 minimumTokenDeposit;\\n    }\\n\\n    struct Participation {\\n        uint256 amountPaid;\\n        uint256 timeParticipated;\\n        uint256 tierId;\\n        bool isTokenLeftWithdrawn;\\n        bool[] isPortionWithdrawn;\\n    }\\n\\n    struct Tier {\\n        uint256 participants;\\n        uint256 tierWeight; \\n        uint256 USDCDeposited;\\n        uint256 minToStake;\\n        uint256 maxToStake;\\n    }\\n\\n    struct WhitelistUser {\\n        address userAddress;\\n        uint256 userTierId;\\n    }\\n\\n    struct Registration {\\n        uint256 registrationTimeStarts;\\n        uint256 registrationTimeEnds;\\n        uint256 numberOfRegistrants;\\n    }\\n\\n    Sale public sale;\\n    Registration public registration;\\n\\n    address public admin;\\n\\n    bool tokensDeposited;\\n    uint256 public numberOfParticipants;\\n    mapping(address => Participation) public userToParticipation;\\n    mapping(address => uint256) public addressToRoundRegisteredFor;\\n    mapping(address => bool) public isParticipated;\\n    mapping(address => WhitelistUser) public Whitelist;\\n\\n    uint256[] public vestingPortionsUnlockTime;\\n    uint256[] public vestingPercentPerPortion;\\n\\n    Tier[] public tierIdToTier;\\n    uint256 public totalTierWeight;\\n\\n    modifier onlySaleOwner() {\\n        require(msg.sender == sale.saleOwner, \\\"OnlySaleOwner\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            msg.sender == admin ,\\n            \\\"Only admin can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    constructor(\\n        address _admin, \\n        address _allocationStaking)  {\\n            require(_admin != address(0));\\n            require(_allocationStaking != address(0));\\n            admin = _admin;\\n            factory = ISalesFactory(msg.sender);\\n            allocationStakingContract = IAllocationStaking(_allocationStaking);\\n    }\\n\\n    function setVestingParams(\\n        uint256[] memory _unlockingTimes,\\n        uint256[] memory _percents\\n    ) external onlyAdmin {\\n        require(\\n            vestingPercentPerPortion.length == 0 &&\\n            vestingPortionsUnlockTime.length == 0\\n        );\\n        require(_unlockingTimes.length == _percents.length);\\n        require(sale.isCreated, \\\"Safeguard for making sure setSaleParams get first called.\\\");\\n\\n        uint256 sum;\\n\\n        for (uint256 i = 0; i < _unlockingTimes.length; i++) {\\n            vestingPortionsUnlockTime.push(_unlockingTimes[i]);\\n            vestingPercentPerPortion.push(_percents[i]);\\n            sum += _percents[i];\\n        }\\n\\n        require(sum == 100, \\\"Percent distribution issue.\\\");\\n    }\\n\\n    function setSaleParams(\\n        address _token,\\n        address _saleOwner,\\n        uint256 _tokenPriceInUSDC,\\n        uint256 _amountOfTokensToSell,\\n        uint256 _saleStart,\\n        uint256 _saleEnd,\\n        uint256 _tokensUnlockTime,\\n        uint256 _minimumTokenDeposit\\n    ) external onlyAdmin {\\n        require(!sale.isCreated, \\\"Sale created.\\\");\\n        require(\\n            _saleOwner != address(0),\\n            \\\"owner can`t be 0.\\\"\\n        );\\n        require(\\n            _tokenPriceInUSDC != 0 &&\\n                _amountOfTokensToSell != 0 &&\\n                _saleEnd > block.timestamp &&\\n                _tokensUnlockTime > block.timestamp,\\n            \\\"Bad input\\\"\\n        );\\n        sale.token = IERC20Extented(_token);\\n        sale.isCreated = true;\\n        sale.saleOwner = _saleOwner;\\n        sale.tokenPriceInUSDC = _tokenPriceInUSDC;\\n        sale.amountOfTokensToSell = _amountOfTokensToSell;\\n        sale.saleEnd = _saleEnd;\\n        sale.saleStart = _saleStart;\\n        sale.tokensUnlockTime = _tokensUnlockTime;\\n        sale.minimumTokenDeposit = _minimumTokenDeposit;\\n    }\\n\\n    function setRegistrationTime(\\n        uint256 _registrationTimeStarts,\\n        uint256 _registrationTimeEnds\\n    ) external onlyAdmin {\\n        require(sale.isCreated, \\\"1\\\");\\n        require(\\n            _registrationTimeStarts >= block.timestamp &&\\n                _registrationTimeEnds > _registrationTimeStarts, \\\"3\\\"\\n        );\\n        require(_registrationTimeEnds < sale.saleEnd, \\\"4\\\");\\n\\n\\n        registration.registrationTimeStarts = _registrationTimeStarts;\\n        registration.registrationTimeEnds = _registrationTimeEnds;\\n\\n    }\\n\\n    function registerForSale() public {\\n\\n        uint256 stakeAmount = allocationStakingContract.deposited(msg.sender);\\n\\n        require(tierIdToTier.length > 0, \\\"Need to set Tiers\\\");\\n        require(tierIdToTier[0].minToStake <= stakeAmount / 1e18 , \\\"Need to stake minimum for current sale\\\");\\n        require( Whitelist[msg.sender].userAddress != msg.sender, \\\"You are registered\\\");\\n        require( block.timestamp >= registration.registrationTimeStarts && block.timestamp <= registration.registrationTimeEnds , \\\"Register is closed\\\");\\n        for (uint256 i = 0; i < tierIdToTier.length; i++) {\\n            Tier memory t = tierIdToTier[i];\\n            if( t.minToStake <= stakeAmount && t.maxToStake > stakeAmount){\\n                WhitelistUser memory u = WhitelistUser({\\n                    userAddress: msg.sender, \\n                    userTierId: i\\n                });\\n                Whitelist[msg.sender] = u;\\n                registration.numberOfRegistrants++;\\n                break;\\n            }\\n        }\\n    }\\n    \\n    function updateTokenPriceInUSDC(uint256 price) external onlyAdmin {\\n        require(price > 0, \\\"Price == 0.\\\");\\n        require(sale.saleStart > block.timestamp, \\\"Sale started\\\");\\n        sale.tokenPriceInUSDC = price;\\n    }\\n\\n    function setWhitelistUsers(address [] calldata users, uint256 tierId) public payable onlyAdmin {\\n         for (uint256 i = 0; i < users.length; i++) {\\n            WhitelistUser memory u = WhitelistUser({\\n                userAddress: users[i], \\n                userTierId: tierId\\n            });\\n            Whitelist[users[i]] = u;\\n        }\\n        \\n    }\\n\\n    function addTiers(uint256 [] calldata tierWeights, uint256 [] calldata tierPoints)  public onlyAdmin {   \\n        \\n        require(tierWeights.length > 0, \\\"Need 1 tier\\\");\\n        require(tierWeights.length == tierPoints.length, \\\"nedd same length\\\");\\n\\n\\n        for (uint256 i = 0; i < tierWeights.length; i++) {\\n            require( \\n                tierWeights[i] > 0,\\n                \\\"weight > 0\\\"\\n            );\\n\\n            totalTierWeight = totalTierWeight + tierWeights[i];\\n\\n            uint256 maxToStake = tierPoints.length - 1 > i ? tierPoints[i+1] : 2**256 - 1;\\n\\n            Tier memory t = Tier({\\n                participants: 0,\\n                tierWeight: tierWeights[i],\\n                USDCDeposited: 0,\\n                minToStake: tierPoints[i],\\n                maxToStake: maxToStake\\n            });\\n            tierIdToTier.push(t);\\n        }\\n\\n     \\n    }\\n\\n\\n    function depositTokens() external onlySaleOwner  {\\n        require(\\n            !tokensDeposited, \\\"Deposit only once\\\"\\n        );\\n        tokensDeposited = true;\\n        sale.token.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            sale.amountOfTokensToSell\\n        );\\n    }\\n\\n    function participate(uint256 amount) \\n    external \\n    payable \\n    {\\n        require(sale.isCreated, \\\"Wait sale create\\\");\\n\\n        require( block.timestamp >= sale.saleStart && block.timestamp <= sale.saleEnd , \\\"Sale not active\\\");\\n\\n        require(!isParticipated[msg.sender], \\\"participate only once.\\\");\\n\\n        require(msg.sender == tx.origin, \\\"Only direct calls\\\");\\n\\n\\n        require(amount > 0, \\\"Can't buy 0 tokens\\\");\\n\\n        require((amount / (10 ** USDCToken.decimals())) % 2 == 0, \\\"Amount need to be divide by 2\\\");\\n\\n        require( Whitelist[msg.sender].userAddress != address(0), \\\"User must be in white list\\\" );\\n\\n        require(amount >= sale.minimumTokenDeposit, \\\"Can't deposit less than minimum\\\"  );\\n\\n        uint256 _tierId = Whitelist[msg.sender].userTierId;\\n        sale.totalUSDCRaised = sale.totalUSDCRaised + amount;\\n\\n        bool[] memory _isPortionWithdrawn = new bool[](\\n            vestingPortionsUnlockTime.length\\n        );\\n\\n        Participation memory p = Participation({\\n            amountPaid: amount,\\n            timeParticipated: block.timestamp,\\n            tierId: _tierId,\\n            isTokenLeftWithdrawn: false,\\n            isPortionWithdrawn: _isPortionWithdrawn\\n        });\\n\\n        Tier storage t = tierIdToTier[_tierId];\\n\\n        t.participants = t.participants + 1;\\n        t.USDCDeposited = t.USDCDeposited + amount;\\n        userToParticipation[msg.sender] = p;\\n        isParticipated[msg.sender] = true;\\n        numberOfParticipants++;\\n\\n        USDCToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdrawTokens(uint256 portionId) external {\\n        require(\\n            block.timestamp >= sale.tokensUnlockTime,\\n            \\\"Tokens cann`t be withdrawn.\\\"\\n        );\\n        require(portionId < vestingPercentPerPortion.length);\\n\\n        Participation storage p = userToParticipation[msg.sender];\\n\\n        if(!p.isTokenLeftWithdrawn){\\n            withdrawLeftoverForUser(msg.sender);\\n            p.isTokenLeftWithdrawn = true;\\n        }\\n\\n        if (\\n            !p.isPortionWithdrawn[portionId] &&\\n            vestingPortionsUnlockTime[portionId] <= block.timestamp\\n        ) {\\n            p.isPortionWithdrawn[portionId] = true;\\n            uint256 amountWithdrawing = calculateAmountWithdrawing(msg.sender, vestingPercentPerPortion[portionId]);\\n\\n            if(amountWithdrawing > 0) {\\n                sale.token.safeTransfer(msg.sender, amountWithdrawing);\\n            }\\n        } else {\\n            revert(\\\"Tokens withdrawn or portion not unlocked.\\\");\\n        }\\n    }\\n\\n    function withdrawLeftoverForUser(address userAddress) internal  {\\n        Participation memory p = userToParticipation[userAddress];\\n\\n\\n        uint256 tokensForUser = calculateAmountWithdrawing(userAddress, 100);\\n\\n        uint256 leftover = p.amountPaid - tokensForUser * sale.tokenPriceInUSDC / 10**sale.token.decimals();\\n\\n        if(leftover > 0){\\n            USDCToken.safeTransfer(msg.sender, leftover);\\n        }\\n    }\\n    \\n\\n    function withdrawMultiplePortions(uint256 [] calldata portionIds) external {\\n        uint256 totalToWithdraw = 0;\\n\\n        Participation storage p = userToParticipation[msg.sender];\\n\\n        if(!p.isTokenLeftWithdrawn){\\n            withdrawLeftoverForUser(msg.sender);\\n            p.isTokenLeftWithdrawn = true;\\n        }\\n\\n        for(uint i=0; i < portionIds.length; i++) {\\n            uint256 portionId = portionIds[i];\\n            require(portionId < vestingPercentPerPortion.length);\\n\\n            if (\\n                !p.isPortionWithdrawn[portionId] &&\\n                vestingPortionsUnlockTime[portionId] <= block.timestamp\\n            ) {\\n                p.isPortionWithdrawn[portionId] = true;\\n                uint256 amountWithdrawing = calculateAmountWithdrawing(msg.sender, vestingPercentPerPortion[portionId]);\\n                totalToWithdraw = totalToWithdraw + amountWithdrawing;\\n            }\\n        }\\n\\n        if(totalToWithdraw > 0) {\\n            sale.token.safeTransfer(msg.sender, totalToWithdraw);\\n        }\\n    }\\n\\n    function withdrawEarnings() external onlySaleOwner {\\n        withdrawEarningsInternal();\\n    }\\n\\n    function withdrawLeftover() external onlySaleOwner {\\n        withdrawLeftoverInternal();\\n    }\\n\\n\\n    function withdrawEarningsInternal() internal  {\\n        require(block.timestamp >= sale.saleEnd);\\n        require(!sale.earningsWithdrawn);\\n        sale.earningsWithdrawn = true;\\n        uint256 totalProfit = sale.totalUSDCRaised;\\n        USDCToken.safeTransfer(msg.sender, totalProfit);\\n    }\\n\\n    function withdrawLeftoverInternal() internal {\\n        require(block.timestamp >= sale.saleEnd);\\n        require(!sale.leftoverWithdrawn);\\n        sale.leftoverWithdrawn = true;\\n        uint256 totalTokensSold = calculateTotalTokensSold();\\n        uint256 leftover = sale.amountOfTokensToSell - totalTokensSold;\\n        if (leftover > 0) {\\n            sale.token.safeTransfer(msg.sender, leftover);\\n        }\\n    }\\n\\n    function calculateTotalTokensSold() internal view returns (\\n            uint256\\n        ) {\\n        uint256 totalTokensSold = 0;\\n\\n        for (uint256 i = 0; i < tierIdToTier.length; i++) {\\n            Tier memory t = tierIdToTier[i];\\n\\n            uint256 tokensPerTier = t.tierWeight * sale.amountOfTokensToSell/totalTierWeight;\\n\\n            if( tokensPerTier * sale.tokenPriceInUSDC / 10**sale.token.decimals() <= t.USDCDeposited ){\\n                totalTokensSold = totalTokensSold + tokensPerTier;\\n            } else {\\n                totalTokensSold =  totalTokensSold + t.USDCDeposited / sale.tokenPriceInUSDC * 10**sale.token.decimals();\\n            }\\n        }\\n\\n        return(totalTokensSold);\\n    }\\n\\n    function isWhitelisted()\\n        external\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        return (Whitelist[msg.sender].userAddress == msg.sender);\\n    }\\n\\n    function getVestingInfo()\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        return (vestingPortionsUnlockTime, vestingPercentPerPortion);\\n    }\\n\\n    function calculateAmountWithdrawing(address userAddress, uint256 tokenPercent) internal view returns (\\n            uint256\\n        ) {\\n        \\n        Participation memory p = userToParticipation[userAddress];\\n\\n        Tier memory t = tierIdToTier[uint(p.tierId)];\\n\\n        uint256 tokensForUser = 0;\\n\\n        uint256 tokensPerTier = t.tierWeight*sale.amountOfTokensToSell/totalTierWeight;\\n\\n        uint256 maximunTokensForUser = tokensPerTier*tokenPercent/t.participants/100;\\n\\n        uint256 userTokenWish = p.amountPaid/sale.tokenPriceInUSDC * (10**sale.token.decimals())*tokenPercent/100;\\n\\n        if(maximunTokensForUser >= userTokenWish){\\n            tokensForUser = userTokenWish;\\n        }else{\\n            tokensForUser = maximunTokensForUser;\\n        }\\n\\n        return (tokensForUser);\\n    }\\n\\n    function calculateAmountWithdrawingPortionPub(address userAddress, uint256 tokenPercent) public view returns (\\n            uint256\\n        ) {\\n        \\n        Participation memory p = userToParticipation[userAddress];\\n\\n        Tier memory t = tierIdToTier[uint(p.tierId)];\\n\\n        uint256 tokensPerTier = t.tierWeight * sale.amountOfTokensToSell/totalTierWeight;\\n\\n        uint256 tokensForUser = tokensPerTier*tokenPercent/t.participants/100;\\n\\n        return (tokensForUser);\\n    }\\n}\",\"keccak256\":\"0x2a38eb210bd9d25fe1771db8ffd32c091796d722706f44565432c7345c9d3546\",\"license\":\"MIT\"},\"contracts/IAllocationStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAllocationStaking {\\n    function deposited(address _user) external view returns (uint256);\\n}\",\"keccak256\":\"0xf1dc3051df51ae4ffda3f3f0e0f0b2bef53992aa200732e823c765e19b832a6e\",\"license\":\"MIT\"},\"contracts/ISalesFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISalesFactory {\\n    function setSaleOwnerAndToken(address saleOwner, address saleToken) external;\\n    function isSaleCreatedThroughFactory(address sale) external view returns (bool);\\n}\",\"keccak256\":\"0xf0b7b897d6be9913642b693ce0afe3bdf6529db1bf7a23e42fd26dffc0ce5e92\",\"license\":\"MIT\"},\"contracts/SalesFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BttcPadSale.sol\\\";\\n\\ncontract SalesFactory {\\n\\n    address public allocationStaking;\\n    address public admin;\\n\\n    mapping (address => bool) public isSaleCreatedThroughFactory;\\n\\n    address [] public allSales;\\n\\n    modifier onlyAdmin() {\\n        require(\\n            msg.sender == admin ,\\n            \\\"Only admin can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor (address _adminAddress, address _allocationStaking)  {\\n        require(_adminAddress != address(0), \\\"error admin\\\");\\n        require(_allocationStaking != address(0), \\\"error staking\\\");\\n        admin = _adminAddress;\\n        allocationStaking = _allocationStaking;\\n    }\\n\\n    function setAllocationStaking(address _allocationStaking) public onlyAdmin {\\n        require(_allocationStaking != address(0), \\\"address error\\\");\\n        allocationStaking = _allocationStaking;\\n    }\\n\\n\\n    function deploySale()\\n    external\\n    onlyAdmin\\n    {\\n        BttcPadSale sale = new BttcPadSale(address(admin), allocationStaking);\\n\\n        isSaleCreatedThroughFactory[address(sale)] = true;\\n        allSales.push(address(sale));\\n    }\\n\\n    function getNumberOfSalesDeployed() external view returns (uint) {\\n        return allSales.length;\\n    }\\n\\n    function getLastDeployedSale() external view returns (address) {\\n        //\\n        if(allSales.length > 0) {\\n            return allSales[allSales.length - 1];\\n        }\\n        return address(0);\\n    }\\n\\n\\n    function getAllSales(uint startIndex, uint endIndex) external view returns (address[] memory) {\\n        require(endIndex > startIndex, \\\"Bad input\\\");\\n        require(endIndex <= allSales.length, \\\"Request more sale than created\\\");\\n\\n        address[] memory sales = new address[](endIndex - startIndex);\\n        uint index = 0;\\n\\n        for(uint i = startIndex; i < endIndex; i++) {\\n            sales[index] = allSales[i];\\n            index++;\\n        }\\n\\n        return sales;\\n    }\\n\\n}\",\"keccak256\":\"0x0e9fa3f71c8081fc03688070c006ba17fb0a6c1f29013ec488e94674626ece2a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051613f2f380380613f2f83398101604081905261002f9161010b565b6001600160a01b0382166100785760405162461bcd60e51b815260206004820152600b60248201526a32b93937b91030b236b4b760a91b60448201526064015b60405180910390fd5b6001600160a01b0381166100be5760405162461bcd60e51b815260206004820152600d60248201526c6572726f72207374616b696e6760981b604482015260640161006f565b600180546001600160a01b039384166001600160a01b0319918216179091556000805492909316911617905561013d565b80516001600160a01b038116811461010657600080fd5b919050565b6000806040838503121561011d578182fd5b610126836100ef565b9150610134602084016100ef565b90509250929050565b613de38061014c6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80639e75cf4511610076578063b033342b1161005b578063b033342b14610164578063c050f3d41461016c578063f851a4401461017457600080fd5b80639e75cf4514610111578063a00249e81461013157600080fd5b8063135fb504146100a8578063209a9f41146100d85780635b30b428146100e95780639af2c481146100fc575b600080fd5b6000546100bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003546040519081526020016100cf565b6100bb6100f7366004610613565b610187565b61010f61010a3660046105e5565b6101b1565b005b61012461011f36600461062b565b6102a0565b6040516100cf919061064c565b61015461013f3660046105e5565b60026020526000908152604090205460ff1681565b60405190151581526020016100cf565b6100bb61044e565b61010f6104a7565b6001546100bb906001600160a01b031681565b6003818154811061019757600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b0316331461021b5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084015b60405180910390fd5b6001600160a01b0381166102715760405162461bcd60e51b815260206004820152600d60248201527f61646472657373206572726f72000000000000000000000000000000000000006044820152606401610212565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60608282116102f15760405162461bcd60e51b815260206004820152600960248201527f42616420696e70757400000000000000000000000000000000000000000000006044820152606401610212565b6003548211156103435760405162461bcd60e51b815260206004820152601e60248201527f52657175657374206d6f72652073616c65207468616e206372656174656400006044820152606401610212565b600061034f8484610699565b67ffffffffffffffff81111561037557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561039e578160200160208202803683370190505b5090506000845b8481101561044457600381815481106103ce57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b031683838151811061040c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528161042e816106b0565b925050808061043c906106b0565b9150506103a5565b5090949350505050565b600354600090156104a1576003805461046990600190610699565b8154811061048757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316919050565b50600090565b6001546001600160a01b0316331461050c5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b6064820152608401610212565b6001546000805460405191926001600160a01b0390811692911690610530906105d8565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610563573d6000803e3d6000fd5b506001600160a01b03166000818152600260205260408120805460ff191660019081179091556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff1916909117905550565b6136cc806106e283390190565b6000602082840312156105f6578081fd5b81356001600160a01b038116811461060c578182fd5b9392505050565b600060208284031215610624578081fd5b5035919050565b6000806040838503121561063d578081fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561068d5783516001600160a01b031683529284019291840191600101610668565b50909695505050505050565b6000828210156106ab576106ab6106cb565b500390565b60006000198214156106c4576106c46106cb565b5060010190565b634e487b7160e01b600052601160045260246000fdfe6080604052600280546001600160a01b03191673c0e296da19bbdcf960291c7aef02c9f24d6fa1fd1790553480156200003757600080fd5b50604051620036cc380380620036cc8339810160408190526200005a91620000db565b6001600160a01b0382166200006e57600080fd5b6001600160a01b0381166200008257600080fd5b600f80546001600160a01b039384166001600160a01b031991821617909155600180548216331790556000805492909316911617905562000112565b80516001600160a01b0381168114620000d657600080fd5b919050565b60008060408385031215620000ee578182fd5b620000f983620000be565b91506200010960208401620000be565b90509250929050565b6135aa80620001226000396000f3fe6080604052600436106101d85760003560e01c8063845c930611610102578063cd0d2f0811610095578063eb73900b11610064578063eb73900b1461068c578063f1ef7ff2146106eb578063f4b7a4131461070b578063f851a4401461072b57600080fd5b8063cd0d2f0814610604578063cf5b8d4b14610619578063dc25a30014610649578063e099cf641461066c57600080fd5b8063b5c3dbbb116100d1578063b5c3dbbb14610567578063b73c6ce9146105af578063c45a0155146105c4578063c4fbe091146105e457600080fd5b8063845c9306146104ff578063927f6aee14610512578063a525d23714610532578063b0c96ebe1461054757600080fd5b80635e7464f61161017a578063718af7e611610149578063718af7e6146104945780637417040e146104b4578063741dbc13146104ca5780637c4b414d146104ea57600080fd5b80635e7464f614610307578063611b40951461036e5780636ad1fe02146103a65780636f2d209e1461048157600080fd5b80631bf8a8dd116101b65780631bf8a8dd14610277578063315a095d1461028d578063443bd1d0146102ad5780634c34c8de146102e757600080fd5b8063059ea172146101dd578063110b9c751461021a57806318f2a3f714610255575b600080fd5b3480156101e957600080fd5b506000546101fd906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022657600080fd5b50610247610235366004613041565b60126020526000908152604090205481565b604051908152602001610211565b34801561026157600080fd5b50610275610270366004613174565b61074b565b005b34801561028357600080fd5b5061024760185481565b34801561029957600080fd5b506102756102a836600461325e565b610acf565b3480156102b957600080fd5b50600c54600d54600e546102cc92919083565b60408051938452602084019290925290820152606001610211565b3480156102f357600080fd5b506002546101fd906001600160a01b031681565b34801561031357600080fd5b5061034c610322366004613041565b60116020526000908152604090208054600182015460028301546003909301549192909160ff1684565b6040805194855260208501939093529183015215156060820152608001610211565b34801561037a57600080fd5b50336000818152601460205260409020546001600160a01b0316145b6040519015158152602001610211565b3480156103b257600080fd5b50600354600454600554600654600754600854600954600a54600b54610411986001600160a01b038082169960ff600160a01b840481169a600160a81b850482169a600160b01b9095049091169891909216969195929490939192918c565b604080516001600160a01b039d8e1681529b151560208d0152991515998b019990995296151560608a015298909416608088015260a087019290925260c086015260e085015261010084015261012083019390935261014082019290925261016081019190915261018001610211565b61027561048f3660046130ea565b610cfe565b3480156104a057600080fd5b506102756104af366004613134565b610e60565b3480156104c057600080fd5b5061024760105481565b3480156104d657600080fd5b506102476104e53660046130c1565b611011565b3480156104f657600080fd5b50610275611199565b61027561050d36600461325e565b61128c565b34801561051e57600080fd5b5061024761052d36600461325e565b61179d565b34801561053e57600080fd5b506102756117be565b34801561055357600080fd5b5061027561056236600461325e565b611810565b34801561057357600080fd5b5061058761058236600461325e565b61191b565b604080519586526020860194909452928401919091526060830152608082015260a001610211565b3480156105bb57600080fd5b5061027561195c565b3480156105d057600080fd5b506001546101fd906001600160a01b031681565b3480156105f057600080fd5b506102756105ff36600461305b565b6119ae565b34801561061057600080fd5b50610275611bb6565b34801561062557600080fd5b50610396610634366004613041565b60136020526000908152604090205460ff1681565b34801561065557600080fd5b5061065e611f3a565b604051610211929190613326565b34801561067857600080fd5b5061027561068736600461328e565b611fed565b34801561069857600080fd5b506106cc6106a7366004613041565b601460205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610211565b3480156106f757600080fd5b5061024761070636600461325e565b612162565b34801561071757600080fd5b506102756107263660046131dd565b612172565b34801561073757600080fd5b50600f546101fd906001600160a01b031681565b600f546001600160a01b031633146107b55760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084015b60405180910390fd5b826108025760405162461bcd60e51b815260206004820152600b60248201527f4e6565642031207469657200000000000000000000000000000000000000000060448201526064016107ac565b8281146108515760405162461bcd60e51b815260206004820152601060248201527f6e6564642073616d65206c656e6774680000000000000000000000000000000060448201526064016107ac565b60005b83811015610ac857600085858381811061087e57634e487b7160e01b600052603260045260246000fd5b90506020020135116108d25760405162461bcd60e51b815260206004820152600a60248201527f776569676874203e20300000000000000000000000000000000000000000000060448201526064016107ac565b8484828181106108f257634e487b7160e01b600052603260045260246000fd5b905060200201356018546109069190613387565b6018556000816109176001856134c0565b1161092457600019610956565b8383610931846001613387565b81811061094e57634e487b7160e01b600052603260045260246000fd5b905060200201355b905060006040518060a001604052806000815260200188888681811061098c57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001600081526020018686868181106109bf57634e487b7160e01b600052603260045260246000fd5b60209081029290920135835250908101939093526017805460018101825560009190915281517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c15600590920291820155928101517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1684015560408101517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1784015560608101517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c18840155608001517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c19909201919091555080610ac081613503565b915050610854565b5050505050565b600a54421015610b215760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e732063616e6e60742062652077697468647261776e2e000000000060448201526064016107ac565b6016548110610b2f57600080fd5b336000908152601160205260409020600381015460ff16610b6357610b53336123a9565b60038101805460ff191660011790555b806004018281548110610b8657634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff16158015610bde57504260158381548110610bd057634e487b7160e01b600052603260045260246000fd5b906000526020600020015411155b15610c8c576001816004018381548110610c0857634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055506000610c683360168581548110610c5857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154612553565b90508015610c8757600354610c87906001600160a01b031633836127c2565b505050565b60405162461bcd60e51b815260206004820152602960248201527f546f6b656e732077697468647261776e206f7220706f7274696f6e206e6f742060448201527f756e6c6f636b65642e000000000000000000000000000000000000000000000060648201526084016107ac565b5050565b600f546001600160a01b03163314610d635760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084016107ac565b60005b82811015610e5a5760006040518060400160405280868685818110610d9b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610db09190613041565b6001600160a01b0316815260200184905290508060146000878786818110610de857634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610dfd9190613041565b6001600160a01b03908116825260208083019390935260409091016000208351815473ffffffffffffffffffffffffffffffffffffffff191692169190911781559101516001909101555080610e5281613503565b915050610d66565b50505050565b336000908152601160205260408120600381015460ff16610e9457610e84336123a9565b60038101805460ff191660011790555b60005b83811015610ff3576000858583818110610ec157634e487b7160e01b600052603260045260246000fd5b9050602002013590506016805490508110610edb57600080fd5b826004018181548110610efe57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff16158015610f5657504260158281548110610f4857634e487b7160e01b600052603260045260246000fd5b906000526020600020015411155b15610fe0576001836004018281548110610f8057634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055506000610fd03360168481548110610c5857634e487b7160e01b600052603260045260246000fd5b9050610fdc8186613387565b9450505b5080610feb81613503565b915050610e97565b508115610e5a57600354610e5a906001600160a01b031633846127c2565b6001600160a01b0382166000908152601160209081526040808320815160a08101835281548152600182015481850152600282015481840152600382015460ff1615156060820152600482018054845181870281018701909552808552869592946080860193909291908301828280156110ca57602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116110995790505b5050505050815250509050600060178260400151815481106110fc57634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805160a08101825260059094029091018054845260018101549284018390526002810154918401919091526003810154606084015260040154608083015260185460065492945091611159916134a1565b611163919061339f565b825190915060009060649061117888856134a1565b611182919061339f565b61118c919061339f565b9450505050505b92915050565b6004546001600160a01b031633146111e35760405162461bcd60e51b815260206004820152600d60248201526c27b7363ca9b0b632a7bbb732b960991b60448201526064016107ac565b600f54600160a01b900460ff161561123d5760405162461bcd60e51b815260206004820152601160248201527f4465706f736974206f6e6c79206f6e636500000000000000000000000000000060448201526064016107ac565b600f80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b17905560065460035461128a916001600160a01b03909116903390309061286b565b565b600354600160a01b900460ff166112e55760405162461bcd60e51b815260206004820152601060248201527f576169742073616c65206372656174650000000000000000000000000000000060448201526064016107ac565b60095442108015906112f957506008544211155b6113455760405162461bcd60e51b815260206004820152600f60248201527f53616c65206e6f7420616374697665000000000000000000000000000000000060448201526064016107ac565b3360009081526013602052604090205460ff16156113a55760405162461bcd60e51b815260206004820152601660248201527f7061727469636970617465206f6e6c79206f6e63652e0000000000000000000060448201526064016107ac565b3332146113f45760405162461bcd60e51b815260206004820152601160248201527f4f6e6c79206469726563742063616c6c7300000000000000000000000000000060448201526064016107ac565b600081116114445760405162461bcd60e51b815260206004820152601260248201527f43616e277420627579203020746f6b656e73000000000000000000000000000060448201526064016107ac565b60028060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561149357600080fd5b505afa1580156114a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cb91906132af565b6114d690600a6133f6565b6114e0908361339f565b6114ea919061351e565b156115375760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206e65656420746f20626520646976696465206279203200000060448201526064016107ac565b336000908152601460205260409020546001600160a01b031661159c5760405162461bcd60e51b815260206004820152601a60248201527f55736572206d75737420626520696e207768697465206c69737400000000000060448201526064016107ac565b600b548110156115ee5760405162461bcd60e51b815260206004820152601f60248201527f43616e2774206465706f736974206c657373207468616e206d696e696d756d0060448201526064016107ac565b3360009081526014602052604090206001015460075461160f908390613387565b60075560155460009067ffffffffffffffff81111561163e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611667578160200160208202803683370190505b50905060006040518060a001604052808581526020014281526020018481526020016000151581526020018381525090506000601784815481106116bb57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502019050806000015460016116dc9190613387565b815560028101546116ee908690613387565b60028281019190915533600090815260116020908152604091829020855181558582015160018201559185015192820192909255606084015160038201805460ff1916911515919091179055608084015180518593611754926004850192910190612e83565b5050336000908152601360205260408120805460ff191660011790556010805492509061178083613503565b9091555050600254610ac8906001600160a01b031633308861286b565b601681815481106117ad57600080fd5b600091825260209091200154905081565b6004546001600160a01b031633146118085760405162461bcd60e51b815260206004820152600d60248201526c27b7363ca9b0b632a7bbb732b960991b60448201526064016107ac565b61128a6128bc565b600f546001600160a01b031633146118755760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084016107ac565b600081116118c55760405162461bcd60e51b815260206004820152600b60248201527f5072696365203d3d20302e00000000000000000000000000000000000000000060448201526064016107ac565b60095442106119165760405162461bcd60e51b815260206004820152600c60248201527f53616c652073746172746564000000000000000000000000000000000000000060448201526064016107ac565b600555565b6017818154811061192b57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909185565b6004546001600160a01b031633146119a65760405162461bcd60e51b815260206004820152600d60248201526c27b7363ca9b0b632a7bbb732b960991b60448201526064016107ac565b61128a61294d565b600f546001600160a01b03163314611a135760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084016107ac565b600354600160a01b900460ff1615611a6d5760405162461bcd60e51b815260206004820152600d60248201527f53616c6520637265617465642e0000000000000000000000000000000000000060448201526064016107ac565b6001600160a01b038716611ac35760405162461bcd60e51b815260206004820152601160248201527f6f776e65722063616e607420626520302e00000000000000000000000000000060448201526064016107ac565b8515801590611ad157508415155b8015611adc57504283115b8015611ae757504282115b611b335760405162461bcd60e51b815260206004820152600960248201527f42616420696e707574000000000000000000000000000000000000000000000060448201526064016107ac565b600380547fffffffffffffffffffffff000000000000000000000000000000000000000000166001600160a01b03998a1617600160a01b179055600480549790981673ffffffffffffffffffffffffffffffffffffffff199790971696909617909655600593909355600691909155600891909155600955600a91909155600b55565b600080546040517fcb13cddb0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039091169063cb13cddb9060240160206040518083038186803b158015611c1357600080fd5b505afa158015611c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4b9190613276565b601754909150611c9d5760405162461bcd60e51b815260206004820152601160248201527f4e65656420746f2073657420546965727300000000000000000000000000000060448201526064016107ac565b611caf670de0b6b3a76400008261339f565b6017600081548110611cd157634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600301541115611d575760405162461bcd60e51b815260206004820152602660248201527f4e65656420746f207374616b65206d696e696d756d20666f722063757272656e60448201527f742073616c65000000000000000000000000000000000000000000000000000060648201526084016107ac565b336000818152601460205260409020546001600160a01b03161415611dbe5760405162461bcd60e51b815260206004820152601260248201527f596f75206172652072656769737465726564000000000000000000000000000060448201526064016107ac565b600c544210801590611dd25750600d544211155b611e1e5760405162461bcd60e51b815260206004820152601260248201527f526567697374657220697320636c6f736564000000000000000000000000000060448201526064016107ac565b60005b601754811015610cfa57600060178281548110611e4e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905082816060015111158015611eb25750828160800151115b15611f2757604080518082018252338082526020808301868152600092835260149091529281208251815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039091161781559251600190930192909255600e80549192611f1c83613503565b919050555050505050565b5080611f3281613503565b915050611e21565b6060806015601681805480602002602001604051908101604052809291908181526020018280548015611f8c57602002820191906000526020600020905b815481526020019060010190808311611f78575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015611fde57602002820191906000526020600020905b815481526020019060010190808311611fca575b50505050509050915091509091565b600f546001600160a01b031633146120525760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084016107ac565b600354600160a01b900460ff166120ab5760405162461bcd60e51b815260206004820152600160248201527f310000000000000000000000000000000000000000000000000000000000000060448201526064016107ac565b4282101580156120ba57508181115b6121065760405162461bcd60e51b815260206004820152600160248201527f330000000000000000000000000000000000000000000000000000000000000060448201526064016107ac565b60085481106121575760405162461bcd60e51b815260206004820152600160248201527f340000000000000000000000000000000000000000000000000000000000000060448201526064016107ac565b600c91909155600d55565b601581815481106117ad57600080fd5b600f546001600160a01b031633146121d75760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084016107ac565b6016541580156121e75750601554155b6121f057600080fd5b80518251146121fe57600080fd5b600354600160a01b900460ff1661227d5760405162461bcd60e51b815260206004820152603960248201527f53616665677561726420666f72206d616b696e6720737572652073657453616c60448201527f65506172616d73206765742066697273742063616c6c65642e0000000000000060648201526084016107ac565b6000805b83518110156123585760158482815181106122ac57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181018455600093845291909220015582516016908490839081106122f057634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200155825183908290811061233157634e487b7160e01b600052603260045260246000fd5b6020026020010151826123449190613387565b91508061235081613503565b915050612281565b5080606414610c875760405162461bcd60e51b815260206004820152601b60248201527f50657263656e7420646973747269627574696f6e2069737375652e000000000060448201526064016107ac565b6001600160a01b0381166000908152601160209081526040808320815160a08101835281548152600182015481850152600282015481840152600382015460ff161515606082015260048201805484518187028101870190955280855291949293608086019390929083018282801561246157602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116124305790505b50505050508152505090506000612479836064612553565b90506000600360000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156124ce57600080fd5b505afa1580156124e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250691906132af565b61251190600a6133f6565b60055461251e90846134a1565b612528919061339f565b835161253491906134c0565b90508015610e5a57600254610e5a906001600160a01b031633836127c2565b6001600160a01b0382166000908152601160209081526040808320815160a08101835281548152600182015481850152600282015481840152600382015460ff16151560608201526004820180548451818702810187019095528085528695929460808601939092919083018282801561260c57602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116125db5790505b50505050508152505090506000601782604001518154811061263e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050600080601854600380015484602001516126a591906134a1565b6126af919061339f565b83519091506000906064906126c489856134a1565b6126ce919061339f565b6126d8919061339f565b90506000606488600360000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561273057600080fd5b505afa158015612744573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276891906132af565b61277390600a6133f6565b6005548951612782919061339f565b61278c91906134a1565b61279691906134a1565b6127a0919061339f565b90508082106127b1578093506127b5565b8193505b5091979650505050505050565b6040516001600160a01b038316602482015260448101829052610c879084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526129be565b6040516001600160a01b0380851660248301528316604482015260648101829052610e5a9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612807565b6008544210156128cb57600080fd5b600354600160b01b900460ff16156128e257600080fd5b600380547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b179055600061291a612aa3565b9050600081600380015461292e91906134c0565b90508015610cfa57600354610cfa906001600160a01b031633836127c2565b60085442101561295c57600080fd5b600354600160a81b900460ff161561297357600080fd5b600380547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b1790556007546002546129bb906001600160a01b031633836127c2565b50565b6000612a13826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ce99092919063ffffffff16565b805190915015610c875780806020019051810190612a31919061323e565b610c875760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107ac565b600080805b601754811015612ce357600060178281548110612ad557634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805160a08101825260059094029091018054845260018101549284018390526002810154918401919091526003810154606084015260040154608083015260185460065492945091612b32916134a1565b612b3c919061339f565b90508160400151600360000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612b9457600080fd5b505afa158015612ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcc91906132af565b612bd790600a6133f6565b600554612be490846134a1565b612bee919061339f565b11612c0457612bfd8185613387565b9350612cce565b600354604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b158015612c6257600080fd5b505afa158015612c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9a91906132af565b612ca590600a6133f6565b6005546040840151612cb7919061339f565b612cc191906134a1565b612ccb9085613387565b93505b50508080612cdb90613503565b915050612aa8565b50919050565b6060612cf88484600085612d02565b90505b9392505050565b606082471015612d7a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107ac565b6001600160a01b0385163b612dd15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ac565b600080866001600160a01b03168587604051612ded919061330a565b60006040518083038185875af1925050503d8060008114612e2a576040519150601f19603f3d011682016040523d82523d6000602084013e612e2f565b606091505b5091509150612e3f828286612e4a565b979650505050505050565b60608315612e59575081612cfb565b825115612e695782518084602001fd5b8160405162461bcd60e51b81526004016107ac9190613354565b82805482825590600052602060002090601f01602090048101928215612f185791602002820160005b83821115612ee957835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302612eac565b8015612f165782816101000a81549060ff0219169055600101602081600001049283019260010302612ee9565b505b50612f24929150612f28565b5090565b5b80821115612f245760008155600101612f29565b80356001600160a01b0381168114612f5457600080fd5b919050565b60008083601f840112612f6a578081fd5b50813567ffffffffffffffff811115612f81578182fd5b6020830191508360208260051b8501011115612f9c57600080fd5b9250929050565b600082601f830112612fb3578081fd5b8135602067ffffffffffffffff80831115612fd057612fd061355e565b8260051b604051601f19603f83011681018181108482111715612ff557612ff561355e565b60405284815283810192508684018288018501891015613013578687fd5b8692505b85831015613035578035845292840192600192909201918401613017565b50979650505050505050565b600060208284031215613052578081fd5b612cfb82612f3d565b600080600080600080600080610100898b031215613077578384fd5b61308089612f3d565b975061308e60208a01612f3d565b979a9799505050506040860135956060810135956080820135955060a0820135945060c0820135935060e0909101359150565b600080604083850312156130d3578182fd5b6130dc83612f3d565b946020939093013593505050565b6000806000604084860312156130fe578283fd5b833567ffffffffffffffff811115613114578384fd5b61312086828701612f59565b909790965060209590950135949350505050565b60008060208385031215613146578182fd5b823567ffffffffffffffff81111561315c578283fd5b61316885828601612f59565b90969095509350505050565b60008060008060408587031215613189578384fd5b843567ffffffffffffffff808211156131a0578586fd5b6131ac88838901612f59565b909650945060208701359150808211156131c4578384fd5b506131d187828801612f59565b95989497509550505050565b600080604083850312156131ef578182fd5b823567ffffffffffffffff80821115613206578384fd5b61321286838701612fa3565b93506020850135915080821115613227578283fd5b5061323485828601612fa3565b9150509250929050565b60006020828403121561324f578081fd5b81518015158114612cfb578182fd5b60006020828403121561326f578081fd5b5035919050565b600060208284031215613287578081fd5b5051919050565b600080604083850312156132a0578182fd5b50508035926020909101359150565b6000602082840312156132c0578081fd5b815160ff81168114612cfb578182fd5b6000815180845260208085019450808401835b838110156132ff578151875295820195908201906001016132e3565b509495945050505050565b6000825161331c8184602087016134d7565b9190910192915050565b60408152600061333960408301856132d0565b828103602084015261334b81856132d0565b95945050505050565b60208152600082518060208401526133738160408501602087016134d7565b601f01601f19169190910160400192915050565b6000821982111561339a5761339a613532565b500190565b6000826133ae576133ae613548565b500490565b600181815b808511156133ee5781600019048211156133d4576133d4613532565b808516156133e157918102915b93841c93908002906133b8565b509250929050565b6000612cfb60ff84168360008261340f57506001611193565b8161341c57506000611193565b8160018114613432576002811461343c57613458565b6001915050611193565b60ff84111561344d5761344d613532565b50506001821b611193565b5060208310610133831016604e8410600b841016171561347b575081810a611193565b61348583836133b3565b806000190482111561349957613499613532565b029392505050565b60008160001904831182151516156134bb576134bb613532565b500290565b6000828210156134d2576134d2613532565b500390565b60005b838110156134f25781810151838201526020016134da565b83811115610e5a5750506000910152565b600060001982141561351757613517613532565b5060010190565b60008261352d5761352d613548565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220d85c78baa9b95af32d885c71759d8241d5b3708b974b9e1db2743e293abbb4f664736f6c63430008040033a26469706673582212201d1412a1d6c883f83230f03e54e814a032fb9fda31b6fb55e8df4f87d2d5d73664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80639e75cf4511610076578063b033342b1161005b578063b033342b14610164578063c050f3d41461016c578063f851a4401461017457600080fd5b80639e75cf4514610111578063a00249e81461013157600080fd5b8063135fb504146100a8578063209a9f41146100d85780635b30b428146100e95780639af2c481146100fc575b600080fd5b6000546100bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003546040519081526020016100cf565b6100bb6100f7366004610613565b610187565b61010f61010a3660046105e5565b6101b1565b005b61012461011f36600461062b565b6102a0565b6040516100cf919061064c565b61015461013f3660046105e5565b60026020526000908152604090205460ff1681565b60405190151581526020016100cf565b6100bb61044e565b61010f6104a7565b6001546100bb906001600160a01b031681565b6003818154811061019757600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b0316331461021b5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084015b60405180910390fd5b6001600160a01b0381166102715760405162461bcd60e51b815260206004820152600d60248201527f61646472657373206572726f72000000000000000000000000000000000000006044820152606401610212565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60608282116102f15760405162461bcd60e51b815260206004820152600960248201527f42616420696e70757400000000000000000000000000000000000000000000006044820152606401610212565b6003548211156103435760405162461bcd60e51b815260206004820152601e60248201527f52657175657374206d6f72652073616c65207468616e206372656174656400006044820152606401610212565b600061034f8484610699565b67ffffffffffffffff81111561037557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561039e578160200160208202803683370190505b5090506000845b8481101561044457600381815481106103ce57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b031683838151811061040c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528161042e816106b0565b925050808061043c906106b0565b9150506103a5565b5090949350505050565b600354600090156104a1576003805461046990600190610699565b8154811061048757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316919050565b50600090565b6001546001600160a01b0316331461050c5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b6064820152608401610212565b6001546000805460405191926001600160a01b0390811692911690610530906105d8565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610563573d6000803e3d6000fd5b506001600160a01b03166000818152600260205260408120805460ff191660019081179091556003805491820181559091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805473ffffffffffffffffffffffffffffffffffffffff1916909117905550565b6136cc806106e283390190565b6000602082840312156105f6578081fd5b81356001600160a01b038116811461060c578182fd5b9392505050565b600060208284031215610624578081fd5b5035919050565b6000806040838503121561063d578081fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561068d5783516001600160a01b031683529284019291840191600101610668565b50909695505050505050565b6000828210156106ab576106ab6106cb565b500390565b60006000198214156106c4576106c46106cb565b5060010190565b634e487b7160e01b600052601160045260246000fdfe6080604052600280546001600160a01b03191673c0e296da19bbdcf960291c7aef02c9f24d6fa1fd1790553480156200003757600080fd5b50604051620036cc380380620036cc8339810160408190526200005a91620000db565b6001600160a01b0382166200006e57600080fd5b6001600160a01b0381166200008257600080fd5b600f80546001600160a01b039384166001600160a01b031991821617909155600180548216331790556000805492909316911617905562000112565b80516001600160a01b0381168114620000d657600080fd5b919050565b60008060408385031215620000ee578182fd5b620000f983620000be565b91506200010960208401620000be565b90509250929050565b6135aa80620001226000396000f3fe6080604052600436106101d85760003560e01c8063845c930611610102578063cd0d2f0811610095578063eb73900b11610064578063eb73900b1461068c578063f1ef7ff2146106eb578063f4b7a4131461070b578063f851a4401461072b57600080fd5b8063cd0d2f0814610604578063cf5b8d4b14610619578063dc25a30014610649578063e099cf641461066c57600080fd5b8063b5c3dbbb116100d1578063b5c3dbbb14610567578063b73c6ce9146105af578063c45a0155146105c4578063c4fbe091146105e457600080fd5b8063845c9306146104ff578063927f6aee14610512578063a525d23714610532578063b0c96ebe1461054757600080fd5b80635e7464f61161017a578063718af7e611610149578063718af7e6146104945780637417040e146104b4578063741dbc13146104ca5780637c4b414d146104ea57600080fd5b80635e7464f614610307578063611b40951461036e5780636ad1fe02146103a65780636f2d209e1461048157600080fd5b80631bf8a8dd116101b65780631bf8a8dd14610277578063315a095d1461028d578063443bd1d0146102ad5780634c34c8de146102e757600080fd5b8063059ea172146101dd578063110b9c751461021a57806318f2a3f714610255575b600080fd5b3480156101e957600080fd5b506000546101fd906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022657600080fd5b50610247610235366004613041565b60126020526000908152604090205481565b604051908152602001610211565b34801561026157600080fd5b50610275610270366004613174565b61074b565b005b34801561028357600080fd5b5061024760185481565b34801561029957600080fd5b506102756102a836600461325e565b610acf565b3480156102b957600080fd5b50600c54600d54600e546102cc92919083565b60408051938452602084019290925290820152606001610211565b3480156102f357600080fd5b506002546101fd906001600160a01b031681565b34801561031357600080fd5b5061034c610322366004613041565b60116020526000908152604090208054600182015460028301546003909301549192909160ff1684565b6040805194855260208501939093529183015215156060820152608001610211565b34801561037a57600080fd5b50336000818152601460205260409020546001600160a01b0316145b6040519015158152602001610211565b3480156103b257600080fd5b50600354600454600554600654600754600854600954600a54600b54610411986001600160a01b038082169960ff600160a01b840481169a600160a81b850482169a600160b01b9095049091169891909216969195929490939192918c565b604080516001600160a01b039d8e1681529b151560208d0152991515998b019990995296151560608a015298909416608088015260a087019290925260c086015260e085015261010084015261012083019390935261014082019290925261016081019190915261018001610211565b61027561048f3660046130ea565b610cfe565b3480156104a057600080fd5b506102756104af366004613134565b610e60565b3480156104c057600080fd5b5061024760105481565b3480156104d657600080fd5b506102476104e53660046130c1565b611011565b3480156104f657600080fd5b50610275611199565b61027561050d36600461325e565b61128c565b34801561051e57600080fd5b5061024761052d36600461325e565b61179d565b34801561053e57600080fd5b506102756117be565b34801561055357600080fd5b5061027561056236600461325e565b611810565b34801561057357600080fd5b5061058761058236600461325e565b61191b565b604080519586526020860194909452928401919091526060830152608082015260a001610211565b3480156105bb57600080fd5b5061027561195c565b3480156105d057600080fd5b506001546101fd906001600160a01b031681565b3480156105f057600080fd5b506102756105ff36600461305b565b6119ae565b34801561061057600080fd5b50610275611bb6565b34801561062557600080fd5b50610396610634366004613041565b60136020526000908152604090205460ff1681565b34801561065557600080fd5b5061065e611f3a565b604051610211929190613326565b34801561067857600080fd5b5061027561068736600461328e565b611fed565b34801561069857600080fd5b506106cc6106a7366004613041565b601460205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610211565b3480156106f757600080fd5b5061024761070636600461325e565b612162565b34801561071757600080fd5b506102756107263660046131dd565b612172565b34801561073757600080fd5b50600f546101fd906001600160a01b031681565b600f546001600160a01b031633146107b55760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084015b60405180910390fd5b826108025760405162461bcd60e51b815260206004820152600b60248201527f4e6565642031207469657200000000000000000000000000000000000000000060448201526064016107ac565b8281146108515760405162461bcd60e51b815260206004820152601060248201527f6e6564642073616d65206c656e6774680000000000000000000000000000000060448201526064016107ac565b60005b83811015610ac857600085858381811061087e57634e487b7160e01b600052603260045260246000fd5b90506020020135116108d25760405162461bcd60e51b815260206004820152600a60248201527f776569676874203e20300000000000000000000000000000000000000000000060448201526064016107ac565b8484828181106108f257634e487b7160e01b600052603260045260246000fd5b905060200201356018546109069190613387565b6018556000816109176001856134c0565b1161092457600019610956565b8383610931846001613387565b81811061094e57634e487b7160e01b600052603260045260246000fd5b905060200201355b905060006040518060a001604052806000815260200188888681811061098c57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001600081526020018686868181106109bf57634e487b7160e01b600052603260045260246000fd5b60209081029290920135835250908101939093526017805460018101825560009190915281517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c15600590920291820155928101517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1684015560408101517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1784015560608101517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c18840155608001517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c19909201919091555080610ac081613503565b915050610854565b5050505050565b600a54421015610b215760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e732063616e6e60742062652077697468647261776e2e000000000060448201526064016107ac565b6016548110610b2f57600080fd5b336000908152601160205260409020600381015460ff16610b6357610b53336123a9565b60038101805460ff191660011790555b806004018281548110610b8657634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff16158015610bde57504260158381548110610bd057634e487b7160e01b600052603260045260246000fd5b906000526020600020015411155b15610c8c576001816004018381548110610c0857634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055506000610c683360168581548110610c5857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154612553565b90508015610c8757600354610c87906001600160a01b031633836127c2565b505050565b60405162461bcd60e51b815260206004820152602960248201527f546f6b656e732077697468647261776e206f7220706f7274696f6e206e6f742060448201527f756e6c6f636b65642e000000000000000000000000000000000000000000000060648201526084016107ac565b5050565b600f546001600160a01b03163314610d635760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084016107ac565b60005b82811015610e5a5760006040518060400160405280868685818110610d9b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610db09190613041565b6001600160a01b0316815260200184905290508060146000878786818110610de857634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610dfd9190613041565b6001600160a01b03908116825260208083019390935260409091016000208351815473ffffffffffffffffffffffffffffffffffffffff191692169190911781559101516001909101555080610e5281613503565b915050610d66565b50505050565b336000908152601160205260408120600381015460ff16610e9457610e84336123a9565b60038101805460ff191660011790555b60005b83811015610ff3576000858583818110610ec157634e487b7160e01b600052603260045260246000fd5b9050602002013590506016805490508110610edb57600080fd5b826004018181548110610efe57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff16158015610f5657504260158281548110610f4857634e487b7160e01b600052603260045260246000fd5b906000526020600020015411155b15610fe0576001836004018281548110610f8057634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055506000610fd03360168481548110610c5857634e487b7160e01b600052603260045260246000fd5b9050610fdc8186613387565b9450505b5080610feb81613503565b915050610e97565b508115610e5a57600354610e5a906001600160a01b031633846127c2565b6001600160a01b0382166000908152601160209081526040808320815160a08101835281548152600182015481850152600282015481840152600382015460ff1615156060820152600482018054845181870281018701909552808552869592946080860193909291908301828280156110ca57602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116110995790505b5050505050815250509050600060178260400151815481106110fc57634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805160a08101825260059094029091018054845260018101549284018390526002810154918401919091526003810154606084015260040154608083015260185460065492945091611159916134a1565b611163919061339f565b825190915060009060649061117888856134a1565b611182919061339f565b61118c919061339f565b9450505050505b92915050565b6004546001600160a01b031633146111e35760405162461bcd60e51b815260206004820152600d60248201526c27b7363ca9b0b632a7bbb732b960991b60448201526064016107ac565b600f54600160a01b900460ff161561123d5760405162461bcd60e51b815260206004820152601160248201527f4465706f736974206f6e6c79206f6e636500000000000000000000000000000060448201526064016107ac565b600f80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b17905560065460035461128a916001600160a01b03909116903390309061286b565b565b600354600160a01b900460ff166112e55760405162461bcd60e51b815260206004820152601060248201527f576169742073616c65206372656174650000000000000000000000000000000060448201526064016107ac565b60095442108015906112f957506008544211155b6113455760405162461bcd60e51b815260206004820152600f60248201527f53616c65206e6f7420616374697665000000000000000000000000000000000060448201526064016107ac565b3360009081526013602052604090205460ff16156113a55760405162461bcd60e51b815260206004820152601660248201527f7061727469636970617465206f6e6c79206f6e63652e0000000000000000000060448201526064016107ac565b3332146113f45760405162461bcd60e51b815260206004820152601160248201527f4f6e6c79206469726563742063616c6c7300000000000000000000000000000060448201526064016107ac565b600081116114445760405162461bcd60e51b815260206004820152601260248201527f43616e277420627579203020746f6b656e73000000000000000000000000000060448201526064016107ac565b60028060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561149357600080fd5b505afa1580156114a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cb91906132af565b6114d690600a6133f6565b6114e0908361339f565b6114ea919061351e565b156115375760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206e65656420746f20626520646976696465206279203200000060448201526064016107ac565b336000908152601460205260409020546001600160a01b031661159c5760405162461bcd60e51b815260206004820152601a60248201527f55736572206d75737420626520696e207768697465206c69737400000000000060448201526064016107ac565b600b548110156115ee5760405162461bcd60e51b815260206004820152601f60248201527f43616e2774206465706f736974206c657373207468616e206d696e696d756d0060448201526064016107ac565b3360009081526014602052604090206001015460075461160f908390613387565b60075560155460009067ffffffffffffffff81111561163e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611667578160200160208202803683370190505b50905060006040518060a001604052808581526020014281526020018481526020016000151581526020018381525090506000601784815481106116bb57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502019050806000015460016116dc9190613387565b815560028101546116ee908690613387565b60028281019190915533600090815260116020908152604091829020855181558582015160018201559185015192820192909255606084015160038201805460ff1916911515919091179055608084015180518593611754926004850192910190612e83565b5050336000908152601360205260408120805460ff191660011790556010805492509061178083613503565b9091555050600254610ac8906001600160a01b031633308861286b565b601681815481106117ad57600080fd5b600091825260209091200154905081565b6004546001600160a01b031633146118085760405162461bcd60e51b815260206004820152600d60248201526c27b7363ca9b0b632a7bbb732b960991b60448201526064016107ac565b61128a6128bc565b600f546001600160a01b031633146118755760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084016107ac565b600081116118c55760405162461bcd60e51b815260206004820152600b60248201527f5072696365203d3d20302e00000000000000000000000000000000000000000060448201526064016107ac565b60095442106119165760405162461bcd60e51b815260206004820152600c60248201527f53616c652073746172746564000000000000000000000000000000000000000060448201526064016107ac565b600555565b6017818154811061192b57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909185565b6004546001600160a01b031633146119a65760405162461bcd60e51b815260206004820152600d60248201526c27b7363ca9b0b632a7bbb732b960991b60448201526064016107ac565b61128a61294d565b600f546001600160a01b03163314611a135760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084016107ac565b600354600160a01b900460ff1615611a6d5760405162461bcd60e51b815260206004820152600d60248201527f53616c6520637265617465642e0000000000000000000000000000000000000060448201526064016107ac565b6001600160a01b038716611ac35760405162461bcd60e51b815260206004820152601160248201527f6f776e65722063616e607420626520302e00000000000000000000000000000060448201526064016107ac565b8515801590611ad157508415155b8015611adc57504283115b8015611ae757504282115b611b335760405162461bcd60e51b815260206004820152600960248201527f42616420696e707574000000000000000000000000000000000000000000000060448201526064016107ac565b600380547fffffffffffffffffffffff000000000000000000000000000000000000000000166001600160a01b03998a1617600160a01b179055600480549790981673ffffffffffffffffffffffffffffffffffffffff199790971696909617909655600593909355600691909155600891909155600955600a91909155600b55565b600080546040517fcb13cddb0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b039091169063cb13cddb9060240160206040518083038186803b158015611c1357600080fd5b505afa158015611c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4b9190613276565b601754909150611c9d5760405162461bcd60e51b815260206004820152601160248201527f4e65656420746f2073657420546965727300000000000000000000000000000060448201526064016107ac565b611caf670de0b6b3a76400008261339f565b6017600081548110611cd157634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600301541115611d575760405162461bcd60e51b815260206004820152602660248201527f4e65656420746f207374616b65206d696e696d756d20666f722063757272656e60448201527f742073616c65000000000000000000000000000000000000000000000000000060648201526084016107ac565b336000818152601460205260409020546001600160a01b03161415611dbe5760405162461bcd60e51b815260206004820152601260248201527f596f75206172652072656769737465726564000000000000000000000000000060448201526064016107ac565b600c544210801590611dd25750600d544211155b611e1e5760405162461bcd60e51b815260206004820152601260248201527f526567697374657220697320636c6f736564000000000000000000000000000060448201526064016107ac565b60005b601754811015610cfa57600060178281548110611e4e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905082816060015111158015611eb25750828160800151115b15611f2757604080518082018252338082526020808301868152600092835260149091529281208251815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039091161781559251600190930192909255600e80549192611f1c83613503565b919050555050505050565b5080611f3281613503565b915050611e21565b6060806015601681805480602002602001604051908101604052809291908181526020018280548015611f8c57602002820191906000526020600020905b815481526020019060010190808311611f78575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015611fde57602002820191906000526020600020905b815481526020019060010190808311611fca575b50505050509050915091509091565b600f546001600160a01b031633146120525760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084016107ac565b600354600160a01b900460ff166120ab5760405162461bcd60e51b815260206004820152600160248201527f310000000000000000000000000000000000000000000000000000000000000060448201526064016107ac565b4282101580156120ba57508181115b6121065760405162461bcd60e51b815260206004820152600160248201527f330000000000000000000000000000000000000000000000000000000000000060448201526064016107ac565b60085481106121575760405162461bcd60e51b815260206004820152600160248201527f340000000000000000000000000000000000000000000000000000000000000060448201526064016107ac565b600c91909155600d55565b601581815481106117ad57600080fd5b600f546001600160a01b031633146121d75760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f604482015261371760f11b60648201526084016107ac565b6016541580156121e75750601554155b6121f057600080fd5b80518251146121fe57600080fd5b600354600160a01b900460ff1661227d5760405162461bcd60e51b815260206004820152603960248201527f53616665677561726420666f72206d616b696e6720737572652073657453616c60448201527f65506172616d73206765742066697273742063616c6c65642e0000000000000060648201526084016107ac565b6000805b83518110156123585760158482815181106122ac57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181018455600093845291909220015582516016908490839081106122f057634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200155825183908290811061233157634e487b7160e01b600052603260045260246000fd5b6020026020010151826123449190613387565b91508061235081613503565b915050612281565b5080606414610c875760405162461bcd60e51b815260206004820152601b60248201527f50657263656e7420646973747269627574696f6e2069737375652e000000000060448201526064016107ac565b6001600160a01b0381166000908152601160209081526040808320815160a08101835281548152600182015481850152600282015481840152600382015460ff161515606082015260048201805484518187028101870190955280855291949293608086019390929083018282801561246157602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116124305790505b50505050508152505090506000612479836064612553565b90506000600360000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156124ce57600080fd5b505afa1580156124e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250691906132af565b61251190600a6133f6565b60055461251e90846134a1565b612528919061339f565b835161253491906134c0565b90508015610e5a57600254610e5a906001600160a01b031633836127c2565b6001600160a01b0382166000908152601160209081526040808320815160a08101835281548152600182015481850152600282015481840152600382015460ff16151560608201526004820180548451818702810187019095528085528695929460808601939092919083018282801561260c57602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116125db5790505b50505050508152505090506000601782604001518154811061263e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050600080601854600380015484602001516126a591906134a1565b6126af919061339f565b83519091506000906064906126c489856134a1565b6126ce919061339f565b6126d8919061339f565b90506000606488600360000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561273057600080fd5b505afa158015612744573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276891906132af565b61277390600a6133f6565b6005548951612782919061339f565b61278c91906134a1565b61279691906134a1565b6127a0919061339f565b90508082106127b1578093506127b5565b8193505b5091979650505050505050565b6040516001600160a01b038316602482015260448101829052610c879084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526129be565b6040516001600160a01b0380851660248301528316604482015260648101829052610e5a9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612807565b6008544210156128cb57600080fd5b600354600160b01b900460ff16156128e257600080fd5b600380547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16600160b01b179055600061291a612aa3565b9050600081600380015461292e91906134c0565b90508015610cfa57600354610cfa906001600160a01b031633836127c2565b60085442101561295c57600080fd5b600354600160a81b900460ff161561297357600080fd5b600380547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b1790556007546002546129bb906001600160a01b031633836127c2565b50565b6000612a13826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ce99092919063ffffffff16565b805190915015610c875780806020019051810190612a31919061323e565b610c875760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107ac565b600080805b601754811015612ce357600060178281548110612ad557634e487b7160e01b600052603260045260246000fd5b600091825260208083206040805160a08101825260059094029091018054845260018101549284018390526002810154918401919091526003810154606084015260040154608083015260185460065492945091612b32916134a1565b612b3c919061339f565b90508160400151600360000160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612b9457600080fd5b505afa158015612ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcc91906132af565b612bd790600a6133f6565b600554612be490846134a1565b612bee919061339f565b11612c0457612bfd8185613387565b9350612cce565b600354604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163313ce56791600480820192602092909190829003018186803b158015612c6257600080fd5b505afa158015612c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9a91906132af565b612ca590600a6133f6565b6005546040840151612cb7919061339f565b612cc191906134a1565b612ccb9085613387565b93505b50508080612cdb90613503565b915050612aa8565b50919050565b6060612cf88484600085612d02565b90505b9392505050565b606082471015612d7a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107ac565b6001600160a01b0385163b612dd15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ac565b600080866001600160a01b03168587604051612ded919061330a565b60006040518083038185875af1925050503d8060008114612e2a576040519150601f19603f3d011682016040523d82523d6000602084013e612e2f565b606091505b5091509150612e3f828286612e4a565b979650505050505050565b60608315612e59575081612cfb565b825115612e695782518084602001fd5b8160405162461bcd60e51b81526004016107ac9190613354565b82805482825590600052602060002090601f01602090048101928215612f185791602002820160005b83821115612ee957835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302612eac565b8015612f165782816101000a81549060ff0219169055600101602081600001049283019260010302612ee9565b505b50612f24929150612f28565b5090565b5b80821115612f245760008155600101612f29565b80356001600160a01b0381168114612f5457600080fd5b919050565b60008083601f840112612f6a578081fd5b50813567ffffffffffffffff811115612f81578182fd5b6020830191508360208260051b8501011115612f9c57600080fd5b9250929050565b600082601f830112612fb3578081fd5b8135602067ffffffffffffffff80831115612fd057612fd061355e565b8260051b604051601f19603f83011681018181108482111715612ff557612ff561355e565b60405284815283810192508684018288018501891015613013578687fd5b8692505b85831015613035578035845292840192600192909201918401613017565b50979650505050505050565b600060208284031215613052578081fd5b612cfb82612f3d565b600080600080600080600080610100898b031215613077578384fd5b61308089612f3d565b975061308e60208a01612f3d565b979a9799505050506040860135956060810135956080820135955060a0820135945060c0820135935060e0909101359150565b600080604083850312156130d3578182fd5b6130dc83612f3d565b946020939093013593505050565b6000806000604084860312156130fe578283fd5b833567ffffffffffffffff811115613114578384fd5b61312086828701612f59565b909790965060209590950135949350505050565b60008060208385031215613146578182fd5b823567ffffffffffffffff81111561315c578283fd5b61316885828601612f59565b90969095509350505050565b60008060008060408587031215613189578384fd5b843567ffffffffffffffff808211156131a0578586fd5b6131ac88838901612f59565b909650945060208701359150808211156131c4578384fd5b506131d187828801612f59565b95989497509550505050565b600080604083850312156131ef578182fd5b823567ffffffffffffffff80821115613206578384fd5b61321286838701612fa3565b93506020850135915080821115613227578283fd5b5061323485828601612fa3565b9150509250929050565b60006020828403121561324f578081fd5b81518015158114612cfb578182fd5b60006020828403121561326f578081fd5b5035919050565b600060208284031215613287578081fd5b5051919050565b600080604083850312156132a0578182fd5b50508035926020909101359150565b6000602082840312156132c0578081fd5b815160ff81168114612cfb578182fd5b6000815180845260208085019450808401835b838110156132ff578151875295820195908201906001016132e3565b509495945050505050565b6000825161331c8184602087016134d7565b9190910192915050565b60408152600061333960408301856132d0565b828103602084015261334b81856132d0565b95945050505050565b60208152600082518060208401526133738160408501602087016134d7565b601f01601f19169190910160400192915050565b6000821982111561339a5761339a613532565b500190565b6000826133ae576133ae613548565b500490565b600181815b808511156133ee5781600019048211156133d4576133d4613532565b808516156133e157918102915b93841c93908002906133b8565b509250929050565b6000612cfb60ff84168360008261340f57506001611193565b8161341c57506000611193565b8160018114613432576002811461343c57613458565b6001915050611193565b60ff84111561344d5761344d613532565b50506001821b611193565b5060208310610133831016604e8410600b841016171561347b575081810a611193565b61348583836133b3565b806000190482111561349957613499613532565b029392505050565b60008160001904831182151516156134bb576134bb613532565b500290565b6000828210156134d2576134d2613532565b500390565b60005b838110156134f25781810151838201526020016134da565b83811115610e5a5750506000910152565b600060001982141561351757613517613532565b5060010190565b60008261352d5761352d613548565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220d85c78baa9b95af32d885c71759d8241d5b3708b974b9e1db2743e293abbb4f664736f6c63430008040033a26469706673582212201d1412a1d6c883f83230f03e54e814a032fb9fda31b6fb55e8df4f87d2d5d73664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2513,
        "contract": "contracts/SalesFactory.sol:SalesFactory",
        "label": "allocationStaking",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2515,
        "contract": "contracts/SalesFactory.sol:SalesFactory",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2519,
        "contract": "contracts/SalesFactory.sol:SalesFactory",
        "label": "isSaleCreatedThroughFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2522,
        "contract": "contracts/SalesFactory.sol:SalesFactory",
        "label": "allSales",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}