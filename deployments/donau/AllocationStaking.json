{
  "address": "0x3915b4DA28Ddd51bD7E684DeEc3361f71524b38E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "deposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingStart",
          "type": "uint256"
        }
      ],
      "name": "getFeeInternal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToWithdraw",
          "type": "uint256"
        }
      ],
      "name": "getWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paidOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondsPreYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_erc20",
          "type": "address"
        }
      ],
      "name": "setStakingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingStart",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd728a10479eacb3e5d679e5af4ec945bc3640bd4dcc38be300bacf8609bc757f",
  "receipt": {
    "to": null,
    "from": "0x284c98652c9bF896E080832fAe015D01C0022a43",
    "contractAddress": "0x3915b4DA28Ddd51bD7E684DeEc3361f71524b38E",
    "transactionIndex": 0,
    "gasUsed": "774416",
    "logsBloom": "0x00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000004008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000040000000000000000000000010000000000080000000000000000000000000000000000000000000000000004000000000000000000000000000200000000000000000000000000000000000000000000008000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x8560df98098c63cd23e442d85165bf375cdba7fae45d7ccded8fa881f80fd883",
    "transactionHash": "0xd728a10479eacb3e5d679e5af4ec945bc3640bd4dcc38be300bacf8609bc757f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9578115,
        "transactionHash": "0xd728a10479eacb3e5d679e5af4ec945bc3640bd4dcc38be300bacf8609bc757f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000284c98652c9bf896e080832fae015d01c0022a43",
          "0x000000000000000000000000f4c2f1d772488cc6d3ec3c703b9710fa2c0e227e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000c98277eb0c1ac00000000000000000000000000000000000000000000000845624313d94a23968000000000000000000000000000000000000000000000f8a3a5ed0e696e281c9db8000000000000000000000000000000000000000000084555aaec5a9961ea8000000000000000000000000000000000000000000000f8a3b28535e81ee9c89db8",
        "logIndex": 0,
        "blockHash": "0x8560df98098c63cd23e442d85165bf375cdba7fae45d7ccded8fa881f80fd883"
      }
    ],
    "blockNumber": 9578115,
    "cumulativeGasUsed": "774416",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "da1861d0de417d91b8ed51ba4861dec9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingStart\",\"type\":\"uint256\"}],\"name\":\"getFeeInternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"getWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paidOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsPreYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingStart\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"AllocationStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract AllocationStaking {\\n\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;     // How many LP tokens the user has provided.\\n        uint256 stakingStart;\\n    }\\n\\n    uint256 internal secondsPerDay = 86400;\\n    uint256 public stakingPercent = 20;\\n    uint256 public secondsPreYear = 31556926;\\n\\n    IERC20 stakingToken;\\n\\n\\n    address admin;\\n    // The total amount of ERC20 that's paid out as reward.\\n    uint256 public paidOut;\\n    // Total rewards added to farm\\n    uint256 public totalRewards;\\n    // Info of each user that stakes LP tokens.\\n    mapping (address => UserInfo) public userInfo;\\n\\n    //Total token deposited\\n    uint256 public totalDeposits;\\n\\n\\n    modifier onlyOwner {\\n        require( admin == msg.sender , \\\"Sale not created through factory.\\\");\\n        _;\\n    }\\n\\n    constructor ()  {\\n        admin = msg.sender;\\n     }\\n\\n    function setStakingToken(\\n        IERC20 _erc20\\n    )\\n    public onlyOwner\\n    {\\n        stakingToken = _erc20;\\n    }\\n\\n    function fund(uint256 _amount) public onlyOwner {\\n        stakingToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n        totalRewards = totalRewards+_amount;\\n    }\\n\\n    function withdraw(uint256 _amount) public{\\n        UserInfo storage user = userInfo[msg.sender];\\n        require( user.amount >= _amount, \\\"Not enough balance\\\" );\\n\\n\\n        uint256 withdrawFee = getFeeInternal(_amount, user.stakingStart);\\n        uint256 tokenToWithdraw = _amount-withdrawFee;       \\n\\n        harvest();\\n        totalRewards = totalRewards+withdrawFee;\\n\\n        user.stakingStart = block.timestamp;\\n        user.amount = user.amount-_amount;\\n\\n        totalDeposits = totalDeposits-_amount;\\n        stakingToken.safeTransfer(address(msg.sender), tokenToWithdraw);\\n    }\\n\\n    function deposit(uint256 _amount) public {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        // Harvest user pending tokens\\n        if ( user.amount != 0 ){\\n            harvest();\\n        }\\n\\n        stakingToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n        totalDeposits = totalDeposits+_amount;\\n\\n        user.amount = user.amount+_amount;\\n        user.stakingStart = block.timestamp;\\n    }\\n\\n    function deposited(address _user) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        return user.amount;\\n    }\\n\\n    function pending() public view returns(uint256){\\n       UserInfo memory user = userInfo[msg.sender];\\n       uint256 pendingTokens = pendingAmountInternal(user.stakingStart, user.amount);\\n       return(pendingTokens);\\n    }\\n\\n    function harvest() internal{\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        uint256 userPendingEarns = pending();\\n\\n        require( userPendingEarns <= totalRewards, \\\"Not enough token\\\" );\\n\\n        stakingToken.safeTransfer(address(msg.sender), userPendingEarns);\\n        user.stakingStart = block.timestamp;\\n        totalRewards = totalRewards - userPendingEarns;\\n        paidOut = paidOut + userPendingEarns;\\n    }\\n   \\n\\n    function getWithdrawFee(address userAddress, uint256 amountToWithdraw) external view returns (uint256) {\\n        UserInfo storage user = userInfo[userAddress];\\n\\n        return getFeeInternal(amountToWithdraw, user.stakingStart);\\n    }\\n\\n    function getFeeInternal( uint256 amount, uint256 stakingStart )  public view returns(uint256){\\n        \\n        uint256 withdrawFeePercent = getUnstakePercent(block.timestamp-stakingStart);\\n        \\n        return(amount*withdrawFeePercent/100);\\n    }\\n\\n\\n    function pendingAmountInternal(uint256 _stakingStart, uint256 _amount) internal view returns(uint256){\\n        uint256 currenntTimestamp = block.timestamp;\\n        uint256 stakingDuration = currenntTimestamp-_stakingStart;\\n\\n        uint256 pendingTokens = _amount*stakingDuration*stakingPercent/100/secondsPreYear;\\n\\n        return (pendingTokens);\\n    }\\n\\n    function getUnstakePercent(uint256 stakingTime) internal view returns (uint256){\\n        uint256 unstakePercent = 0;\\n        if ( stakingTime < secondsPerDay*14 ){\\n            unstakePercent = 30;\\n        } else if ( stakingTime < secondsPerDay*28 ){\\n            unstakePercent = 20;\\n        } else if ( stakingTime < secondsPerDay*42 ){\\n            unstakePercent = 10;\\n        } else if ( stakingTime < secondsPerDay*56 ){\\n            unstakePercent = 5;\\n        }\\n        return (unstakePercent);\\n    }\\n\\n}\",\"keccak256\":\"0x4c9b1db3f67b63b2b3835b8da14f1b5981fbc495168068de3d53a5fda615e0c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526201518060005560146001556301e1853e60025534801561002457600080fd5b50600480546001600160a01b03191633179055610b77806100466000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b6b55f251161008c578063ca1d209d11610066578063ca1d209d146101b9578063cb13cddb146101cc578063e20ccec3146101f5578063fbfe316e146101fd57600080fd5b8063b6b55f251461018a578063be1193ea1461019d578063c9d8ada6146101a657600080fd5b80631e9b12ef116100c85780631e9b12ef146101505780632e1a7d4d146101655780635c76ca2d146101785780637d8820971461018157600080fd5b80630e15561a146100ef5780631959a0021461010b5780631a4e412514610147575b600080fd5b6100f860065481565b6040519081526020015b60405180910390f35b61013261011936600461098a565b6007602052600090815260409020805460019091015482565b60408051928352602083019190915201610102565b6100f860025481565b61016361015e36600461098a565b610210565b005b6101636101733660046109f1565b6102b3565b6100f860055481565b6100f860085481565b6101636101983660046109f1565b61038f565b6100f860015481565b6100f86101b4366004610a09565b6103ef565b6101636101c73660046109f1565b610424565b6100f86101da36600461098a565b6001600160a01b031660009081526007602052604090205490565b6100f86104b4565b6100f861020b3660046109a6565b6104f4565b6004546001600160a01b031633146102795760405162461bcd60e51b815260206004820152602160248201527f53616c65206e6f742063726561746564207468726f75676820666163746f72796044820152601760f91b60648201526084015b60405180910390fd5b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b33600090815260076020526040902080548211156103135760405162461bcd60e51b815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e636500000000000000000000000000006044820152606401610270565b60006103238383600101546103ef565b905060006103318285610ad0565b905061033b61051c565b816006546103499190610a79565b600655426001840155825461035f908590610ad0565b835560085461036f908590610ad0565b600855600354610389906001600160a01b031633836105cb565b50505050565b3360009081526007602052604090208054156103ad576103ad61051c565b6003546103c5906001600160a01b0316333085610679565b816008546103d39190610a79565b60085580546103e3908390610a79565b81554260019091015550565b6000806104046103ff8442610ad0565b6106ca565b905060646104128286610ab1565b61041c9190610a91565b949350505050565b6004546001600160a01b031633146104885760405162461bcd60e51b815260206004820152602160248201527f53616c65206e6f742063726561746564207468726f75676820666163746f72796044820152601760f91b6064820152608401610270565b6003546104a0906001600160a01b0316333084610679565b806006546104ae9190610a79565b60065550565b33600090815260076020908152604080832081518083019092528054808352600190910154928201839052909183916104ed9190610743565b9392505050565b6001600160a01b0382166000908152600760205260408120600181015461041c9084906103ef565b336000908152600760205260408120906105346104b4565b90506006548111156105885760405162461bcd60e51b815260206004820152601060248201527f4e6f7420656e6f75676820746f6b656e000000000000000000000000000000006044820152606401610270565b60035461059f906001600160a01b031633836105cb565b4260018301556006546105b3908290610ad0565b6006556005546105c4908290610a79565b6005555050565b6040516001600160a01b0383166024820152604481018290526106749084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610791565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526103899085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610610565b6000805481906106db90600e610ab1565b8310156106ea5750601e61073d565b6000546106f890601c610ab1565b8310156107075750601461073d565b60005461071590602a610ab1565b8310156107245750600a61073d565b600054610732906038610ab1565b83101561073d575060055b92915050565b600042816107518583610ad0565b90506000600254606460015484886107699190610ab1565b6107739190610ab1565b61077d9190610a91565b6107879190610a91565b9695505050505050565b60006107e6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108769092919063ffffffff16565b805190915015610674578080602001905181019061080491906109d1565b6106745760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610270565b606061041c8484600085856001600160a01b0385163b6108d85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610270565b600080866001600160a01b031685876040516108f49190610a2a565b60006040518083038185875af1925050503d8060008114610931576040519150601f19603f3d011682016040523d82523d6000602084013e610936565b606091505b5091509150610946828286610951565b979650505050505050565b606083156109605750816104ed565b8251156109705782518084602001fd5b8160405162461bcd60e51b81526004016102709190610a46565b60006020828403121561099b578081fd5b81356104ed81610b29565b600080604083850312156109b8578081fd5b82356109c381610b29565b946020939093013593505050565b6000602082840312156109e2578081fd5b815180151581146104ed578182fd5b600060208284031215610a02578081fd5b5035919050565b60008060408385031215610a1b578182fd5b50508035926020909101359150565b60008251610a3c818460208701610ae7565b9190910192915050565b6020815260008251806020840152610a65816040850160208701610ae7565b601f01601f19169190910160400192915050565b60008219821115610a8c57610a8c610b13565b500190565b600082610aac57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610acb57610acb610b13565b500290565b600082821015610ae257610ae2610b13565b500390565b60005b83811015610b02578181015183820152602001610aea565b838111156103895750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610b3e57600080fd5b5056fea2646970667358221220aee9d99d98bdd94dd4577acaaf4f9bf6505b17bfc41f34362fe26e8a8ffa135b64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063b6b55f251161008c578063ca1d209d11610066578063ca1d209d146101b9578063cb13cddb146101cc578063e20ccec3146101f5578063fbfe316e146101fd57600080fd5b8063b6b55f251461018a578063be1193ea1461019d578063c9d8ada6146101a657600080fd5b80631e9b12ef116100c85780631e9b12ef146101505780632e1a7d4d146101655780635c76ca2d146101785780637d8820971461018157600080fd5b80630e15561a146100ef5780631959a0021461010b5780631a4e412514610147575b600080fd5b6100f860065481565b6040519081526020015b60405180910390f35b61013261011936600461098a565b6007602052600090815260409020805460019091015482565b60408051928352602083019190915201610102565b6100f860025481565b61016361015e36600461098a565b610210565b005b6101636101733660046109f1565b6102b3565b6100f860055481565b6100f860085481565b6101636101983660046109f1565b61038f565b6100f860015481565b6100f86101b4366004610a09565b6103ef565b6101636101c73660046109f1565b610424565b6100f86101da36600461098a565b6001600160a01b031660009081526007602052604090205490565b6100f86104b4565b6100f861020b3660046109a6565b6104f4565b6004546001600160a01b031633146102795760405162461bcd60e51b815260206004820152602160248201527f53616c65206e6f742063726561746564207468726f75676820666163746f72796044820152601760f91b60648201526084015b60405180910390fd5b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b33600090815260076020526040902080548211156103135760405162461bcd60e51b815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e636500000000000000000000000000006044820152606401610270565b60006103238383600101546103ef565b905060006103318285610ad0565b905061033b61051c565b816006546103499190610a79565b600655426001840155825461035f908590610ad0565b835560085461036f908590610ad0565b600855600354610389906001600160a01b031633836105cb565b50505050565b3360009081526007602052604090208054156103ad576103ad61051c565b6003546103c5906001600160a01b0316333085610679565b816008546103d39190610a79565b60085580546103e3908390610a79565b81554260019091015550565b6000806104046103ff8442610ad0565b6106ca565b905060646104128286610ab1565b61041c9190610a91565b949350505050565b6004546001600160a01b031633146104885760405162461bcd60e51b815260206004820152602160248201527f53616c65206e6f742063726561746564207468726f75676820666163746f72796044820152601760f91b6064820152608401610270565b6003546104a0906001600160a01b0316333084610679565b806006546104ae9190610a79565b60065550565b33600090815260076020908152604080832081518083019092528054808352600190910154928201839052909183916104ed9190610743565b9392505050565b6001600160a01b0382166000908152600760205260408120600181015461041c9084906103ef565b336000908152600760205260408120906105346104b4565b90506006548111156105885760405162461bcd60e51b815260206004820152601060248201527f4e6f7420656e6f75676820746f6b656e000000000000000000000000000000006044820152606401610270565b60035461059f906001600160a01b031633836105cb565b4260018301556006546105b3908290610ad0565b6006556005546105c4908290610a79565b6005555050565b6040516001600160a01b0383166024820152604481018290526106749084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610791565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526103899085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610610565b6000805481906106db90600e610ab1565b8310156106ea5750601e61073d565b6000546106f890601c610ab1565b8310156107075750601461073d565b60005461071590602a610ab1565b8310156107245750600a61073d565b600054610732906038610ab1565b83101561073d575060055b92915050565b600042816107518583610ad0565b90506000600254606460015484886107699190610ab1565b6107739190610ab1565b61077d9190610a91565b6107879190610a91565b9695505050505050565b60006107e6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108769092919063ffffffff16565b805190915015610674578080602001905181019061080491906109d1565b6106745760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610270565b606061041c8484600085856001600160a01b0385163b6108d85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610270565b600080866001600160a01b031685876040516108f49190610a2a565b60006040518083038185875af1925050503d8060008114610931576040519150601f19603f3d011682016040523d82523d6000602084013e610936565b606091505b5091509150610946828286610951565b979650505050505050565b606083156109605750816104ed565b8251156109705782518084602001fd5b8160405162461bcd60e51b81526004016102709190610a46565b60006020828403121561099b578081fd5b81356104ed81610b29565b600080604083850312156109b8578081fd5b82356109c381610b29565b946020939093013593505050565b6000602082840312156109e2578081fd5b815180151581146104ed578182fd5b600060208284031215610a02578081fd5b5035919050565b60008060408385031215610a1b578182fd5b50508035926020909101359150565b60008251610a3c818460208701610ae7565b9190910192915050565b6020815260008251806020840152610a65816040850160208701610ae7565b601f01601f19169190910160400192915050565b60008219821115610a8c57610a8c610b13565b500190565b600082610aac57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610acb57610acb610b13565b500290565b600082821015610ae257610ae2610b13565b500390565b60005b83811015610b02578181015183820152602001610aea565b838111156103895750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610b3e57600080fd5b5056fea2646970667358221220aee9d99d98bdd94dd4577acaaf4f9bf6505b17bfc41f34362fe26e8a8ffa135b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2747,
        "contract": "contracts/Staking.sol:AllocationStaking",
        "label": "secondsPerDay",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2750,
        "contract": "contracts/Staking.sol:AllocationStaking",
        "label": "stakingPercent",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2753,
        "contract": "contracts/Staking.sol:AllocationStaking",
        "label": "secondsPreYear",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2756,
        "contract": "contracts/Staking.sol:AllocationStaking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 2758,
        "contract": "contracts/Staking.sol:AllocationStaking",
        "label": "admin",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2760,
        "contract": "contracts/Staking.sol:AllocationStaking",
        "label": "paidOut",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2762,
        "contract": "contracts/Staking.sol:AllocationStaking",
        "label": "totalRewards",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2767,
        "contract": "contracts/Staking.sol:AllocationStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(UserInfo)2744_storage)"
      },
      {
        "astId": 2769,
        "contract": "contracts/Staking.sol:AllocationStaking",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)2744_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AllocationStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2744_storage"
      },
      "t_struct(UserInfo)2744_storage": {
        "encoding": "inplace",
        "label": "struct AllocationStaking.UserInfo",
        "members": [
          {
            "astId": 2741,
            "contract": "contracts/Staking.sol:AllocationStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2743,
            "contract": "contracts/Staking.sol:AllocationStaking",
            "label": "stakingStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}